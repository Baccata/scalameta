example.A# => example.
example.A#foo(0). => example.A#
example.B# => example.
example.B#`<init>`(0). => example.B#
example.B#foo(0). => example.B#
example.Example. => example.
example.Example.main(1). => example.Example.
example.Example.main(1).(args) => example.Example.main(1).
example.Example.x. => example.Example.
example.Synthetic# => example.
example.Synthetic#`<init>`(0). => example.Synthetic#
example.`local-file`# => example.
example.`local-file`#`<init>`(0). => example.`local-file`#
exclude.Exclude# => exclude.
exclude.Exclude#`<init>`(0). => exclude.Exclude#
flags.p.package. => flags.p.
flags.p.package.AA# => flags.p.package.
flags.p.package.AA#(x) => flags.p.package.AA#
flags.p.package.AA#(y) => flags.p.package.AA#
flags.p.package.AA#(z) => flags.p.package.AA#
flags.p.package.AA#`<init>`(3). => flags.p.package.AA#
flags.p.package.AA#`<init>`(3).(x) => flags.p.package.AA#`<init>`(3).
flags.p.package.AA#`<init>`(3).(y) => flags.p.package.AA#`<init>`(3).
flags.p.package.AA#`<init>`(3).(z) => flags.p.package.AA#`<init>`(3).
flags.p.package.C# => flags.p.package.
flags.p.package.C#(x) => flags.p.package.C#
flags.p.package.C#(y) => flags.p.package.C#
flags.p.package.C#(z) => flags.p.package.C#
flags.p.package.C#[T] => flags.p.package.C#
flags.p.package.C#[U] => flags.p.package.C#
flags.p.package.C#[V] => flags.p.package.C#
flags.p.package.C#`<init>`(0). => flags.p.package.C#
flags.p.package.C#`<init>`(3). => flags.p.package.C#
flags.p.package.C#`<init>`(3).(x) => flags.p.package.C#`<init>`(3).
flags.p.package.C#`<init>`(3).(y) => flags.p.package.C#`<init>`(3).
flags.p.package.C#`<init>`(3).(z) => flags.p.package.C#`<init>`(3).
flags.p.package.C#w(0). => flags.p.package.C#
flags.p.package.S# => flags.p.package.
flags.p.package.S#[T] => flags.p.package.S#
flags.p.package.S#`<init>`(0). => flags.p.package.S#
flags.p.package.T# => flags.p.package.
flags.p.package.U# => flags.p.package.
flags.p.package.V# => flags.p.package.
flags.p.package.X. => flags.p.package.
flags.p.package.Y# => flags.p.package.
flags.p.package.Y#`<init>`(0). => flags.p.package.Y#
flags.p.package.Z# => flags.p.package.
flags.p.package.m(0). => flags.p.package.
flags.p.package.m(0).[TT] => flags.p.package.m(0).
flags.p.package.x. => flags.p.package.
flags.p.package.y. => flags.p.package.
flags.p.package.z(1). => flags.p.package.
flags.p.package.z(1).(pp) => flags.p.package.z(1).
types.B# => types.
types.B#`<init>`(0). => types.B#
types.C# => types.
types.C#`<init>`(0). => types.C#
types.P# => types.
types.P#C# => types.P#
types.P#C#`<init>`(0). => types.P#C#
types.P#X# => types.P#
types.P#X#`<init>`(0). => types.P#X#
types.P#`<init>`(0). => types.P#
types.P#x. => types.P#
types.T# => types.
types.T#C# => types.T#
types.T#C#`<init>`(0). => types.T#C#
types.T#X# => types.T#
types.T#X#`<init>`(0). => types.T#X#
types.T#`<init>`(0). => types.T#
types.T#x. => types.T#
types.Test. => types.
types.Test.C# => types.Test.
types.Test.C#ByNameType. => types.Test.C#
types.Test.C#ByNameType.m1(1). => types.Test.C#ByNameType.
types.Test.C#ByNameType.m1(1).(x) => types.Test.C#ByNameType.m1(1).
types.Test.C#ClassInfoType1. => types.Test.C#
types.Test.C#ClassInfoType2# => types.Test.C#
types.Test.C#ClassInfoType2#`<init>`(0). => types.Test.C#ClassInfoType2#
types.Test.C#ClassInfoType2#x(0). => types.Test.C#ClassInfoType2#
types.Test.C#ClassInfoType3# => types.Test.C#
types.Test.C#ClassInfoType3#[T] => types.Test.C#ClassInfoType3#
types.Test.C#MethodType. => types.Test.C#
types.Test.C#MethodType.m3(0). => types.Test.C#MethodType.
types.Test.C#MethodType.m4(0). => types.Test.C#MethodType.
types.Test.C#MethodType.m5(1). => types.Test.C#MethodType.
types.Test.C#MethodType.m5(1).(x) => types.Test.C#MethodType.m5(1).
types.Test.C#MethodType.m6(1). => types.Test.C#MethodType.
types.Test.C#MethodType.m6(1).(x) => types.Test.C#MethodType.m6(1).
types.Test.C#MethodType.m6(1).[T] => types.Test.C#MethodType.m6(1).
types.Test.C#MethodType.x1(0). => types.Test.C#MethodType.
types.Test.C#MethodType.x2(0). => types.Test.C#MethodType.
types.Test.C#RepeatedType# => types.Test.C#
types.Test.C#RepeatedType#(s) => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#`<init>`(1). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#`<init>`(1).(s) => types.Test.C#RepeatedType#`<init>`(1).
types.Test.C#RepeatedType#m1(1). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#m1(1).(x) => types.Test.C#RepeatedType#m1(1).
types.Test.C#RepeatedType.apply(1).(s) => types.Test.C#RepeatedType.apply(1).
types.Test.C#TypeType. => types.Test.C#
types.Test.C#TypeType.T1# => types.Test.C#TypeType.
types.Test.C#TypeType.T4# => types.Test.C#TypeType.
types.Test.C#TypeType.T5# => types.Test.C#TypeType.
types.Test.C#TypeType.T5#[U] => types.Test.C#TypeType.T5#
types.Test.C#TypeType.m2(0). => types.Test.C#TypeType.
types.Test.C#TypeType.m2(0).[T2] => types.Test.C#TypeType.m2(0).
types.Test.C#TypeType.m3(0). => types.Test.C#TypeType.
types.Test.C#TypeType.m3(0).[M3] => types.Test.C#TypeType.m3(0).
types.Test.C#TypeType.m3(0).[M3][_] => types.Test.C#TypeType.m3(0).[M3]
types.Test.C#`<init>`(0). => types.Test.C#
types.Test.C#`<refinement>`# => types.Test.C#
types.Test.C#`<refinement>`#k(0). => types.Test.C#`<refinement>`#
types.Test.C#`existentialType1 `(0).T# => types.Test.C#`existentialType1 `(0).
types.Test.C#annType1. => types.Test.C#
types.Test.C#annType2. => types.Test.C#
types.Test.C#compoundType1. => types.Test.C#
types.Test.C#compoundType2. => types.Test.C#
types.Test.C#compoundType3. => types.Test.C#
types.Test.C#existentialType1. => types.Test.C#
types.Test.C#p. => types.Test.C#
types.Test.C#singleType1. => types.Test.C#
types.Test.C#singleType2. => types.Test.C#
types.Test.C#superType1. => types.Test.C#
types.Test.C#superType2. => types.Test.C#
types.Test.C#superType3. => types.Test.C#
types.Test.C#thisType1. => types.Test.C#
types.Test.C#thisType2. => types.Test.C#
types.Test.C#typeLambda1(0). => types.Test.C#
types.Test.C#typeLambda1(0).[M] => types.Test.C#typeLambda1(0).
types.Test.C#typeLambda1(0).[M][_] => types.Test.C#typeLambda1(0).[M]
types.Test.C#typeRef1. => types.Test.C#
types.Test.C#typeRef2. => types.Test.C#
types.Test.C#typeRef3. => types.Test.C#
types.Test.C#typeRef4. => types.Test.C#
types.Test.C#x. => types.Test.C#
types.Test.Literal. => types.Test.
types.Test.Literal.bool. => types.Test.Literal.
types.Test.Literal.char. => types.Test.Literal.
types.Test.Literal.clazzOf. => types.Test.Literal.
types.Test.Literal.double. => types.Test.Literal.
types.Test.Literal.float. => types.Test.Literal.
types.Test.Literal.int. => types.Test.Literal.
types.Test.Literal.javaEnum. => types.Test.Literal.
types.Test.Literal.long. => types.Test.Literal.
types.Test.Literal.nil. => types.Test.Literal.
types.Test.Literal.string. => types.Test.Literal.
types.Test.Literal.unit. => types.Test.Literal.
types.Test.M# => types.Test.
types.Test.M#`<init>`(0). => types.Test.M#
types.Test.M#m(0). => types.Test.M#
types.Test.N# => types.Test.
types.Test.N#`<init>`(0). => types.Test.N#
types.Test.N#n(0). => types.Test.N#
types.ann# => types.
types.ann#(x) => types.ann#
types.ann#[T] => types.ann#
types.ann#`<init>`(1). => types.ann#
types.ann#`<init>`(1).(x) => types.ann#`<init>`(1).
types.ann1# => types.
types.ann1#`<init>`(0). => types.ann1#
types.ann2# => types.
types.ann2#`<init>`(0). => types.ann2#