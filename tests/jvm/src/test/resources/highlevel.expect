semanticdb/integration/src/main/scala/example/Accessibility.scala
-----------------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[23..26): Acc <= _root_.example.Acc#
[27..27):  <= _root_.example.Acc#`<init>`().
[43..45): m1 <= _root_.example.Acc#m1().
[48..51): ??? => _root_.scala.Predef.`???`().
[72..74): m2 <= _root_.example.Acc#m2().
[77..80): ??? => _root_.scala.Predef.`???`().
[91..94): Acc => _root_.example.Acc#
[100..102): m3 <= _root_.example.Acc#m3().
[105..108): ??? => _root_.scala.Predef.`???`().
[125..127): m4 <= _root_.example.Acc#m4().
[130..133): ??? => _root_.scala.Predef.`???`().
[156..158): m5 <= _root_.example.Acc#m5().
[161..164): ??? => _root_.scala.Predef.`???`().
[177..184): example => _root_.example.
[190..192): m6 <= _root_.example.Acc#m6().
[195..198): ??? => _root_.scala.Predef.`???`().
[205..207): m7 <= _root_.example.Acc#m7().
[210..213): ??? => _root_.scala.Predef.`???`().

Symbols:
_root_.example. => package example.{+7 members}
_root_.example.Acc# => class Acc
_root_.example.Acc#`<init>`(). => primaryctor <init>: (): Acc
  [4..7): Acc => _root_.example.Acc#
_root_.example.Acc#m1(). => private def m1: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.example.Acc#m2(). => private def m2: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.example.Acc#m3(). => private def m3: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.example.Acc#m4(). => protected def m4: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.example.Acc#m5(). => protected def m5: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.example.Acc#m6(). => protected def m6: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.example.Acc#m7(). => def m7: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.scala.Predef.`???`(). => def ???: Nothing
  [0..7): Nothing => _root_.scala.Nothing#


semanticdb/integration/src/main/scala/example/Empty.scala
---------------------------------------------------------
Language:
Scala212

Names:
[6..11): Empty <= _empty_.Empty#

Symbols:
_empty_.Empty# => class Empty
_empty_.Empty#`<init>`(). => primaryctor <init>: (): Empty
  [4..9): Empty => _empty_.Empty#


semanticdb/integration/src/main/scala/example/Example.scala
-----------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[24..29): scala => _root_.scala.
[30..40): concurrent => _root_.scala.concurrent.
[41..47): Future => _root_.scala.concurrent.Future#;_root_.scala.concurrent.Future.
[56..63): Example <= _root_.example.Example.
[66..70): self <= local0_semanticdb_integration_src_main_scala_example_Example_scala
[80..85): scala => _root_.scala.
[86..96): collection => _root_.scala.collection.
[97..104): mutable => _root_.scala.collection.mutable.
[105..110): Stack => _root_.scala.collection.mutable.Stack#
[111..114): Int => _root_.scala.Int#
[115..115):  => _root_.scala.collection.mutable.Stack#`<init>`().
[124..128): main <= _root_.example.Example.main(Array).
[129..133): args <= _root_.example.Example.main(Array).(args)
[135..140): Array => _root_.scala.Array#
[141..147): String => _root_.scala.Predef.String#
[151..155): Unit => _root_.scala.Unit#
[164..171): println => _root_.scala.Predef.println(Any).
[185..186): x <= _root_.example.Example.x.
[189..194): scala => _root_.scala.
[195..202): reflect => _root_.scala.reflect.
[203..211): classTag => _root_.scala.reflect.package.classTag(ClassTag).
[212..215): Int => _root_.scala.Int#

Messages:
[41..47): [warning] Unused import
[80..115): [warning] class Stack in package mutable is deprecated (since 2.12.0): Stack is an inelegant and potentially poorly-performing wrapper around List. Use a List assigned to a var instead.

Symbols:
_root_.example. => package example.{+7 members}
_root_.example.Example. => final object Example
_root_.example.Example.main(Array). => def main: (args: Array[String]): Unit
  [7..12): Array => _root_.scala.Array#
  [13..19): String => _root_.scala.Predef.String#
  [23..27): Unit => _root_.scala.Unit#
_root_.example.Example.main(Array).(args) => param args: Array[String]
  [0..5): Array => _root_.scala.Array#
  [6..12): String => _root_.scala.Predef.String#
_root_.example.Example.x. => val x: ClassTag[Int]
  [0..8): ClassTag => _root_.scala.reflect.ClassTag#
  [9..12): Int => _root_.scala.Int#
_root_.scala. => package scala
_root_.scala.Array# => final class Array
_root_.scala.Int# => abstract final class Int
_root_.scala.Predef.String# => type String: String
  [0..6): String => _root_.java.lang.String#
_root_.scala.Predef.println(Any). => def println: (x: Any): Unit
  [4..7): Any => _root_.scala.Any#
  [10..14): Unit => _root_.scala.Unit#
_root_.scala.Unit# => abstract final class Unit
_root_.scala.collection. => package collection
_root_.scala.collection.mutable. => package mutable
_root_.scala.collection.mutable.Stack# => class Stack
_root_.scala.collection.mutable.Stack#`<init>`(). => secondaryctor <init>: (): Stack[A]
  [4..9): Stack => _root_.scala.collection.mutable.Stack#
  [10..11): A => _root_.scala.collection.mutable.Stack#[A]
_root_.scala.concurrent. => package concurrent
_root_.scala.reflect. => package reflect
_root_.scala.reflect.package.classTag(ClassTag). => def classTag: [T] => (implicit ctag: ClassTag[T]): ClassTag[T]
  [23..31): ClassTag => _root_.scala.reflect.ClassTag#
  [32..33): T => _root_.scala.reflect.package.classTag(ClassTag).[T]
  [37..45): ClassTag => _root_.scala.reflect.ClassTag#
  [46..47): T => _root_.scala.reflect.package.classTag(ClassTag).[T]
local0_semanticdb_integration_src_main_scala_example_Example_scala => selfparam self: Example
  [0..7): Example => _root_.example.Example.

Synthetics:
[216..216): *(((ClassTag.Int): ClassTag[Int]))
  [0..1): * => _star_.
  [28..31): Int => _root_.scala.Int#
  [19..27): ClassTag => _root_.scala.reflect.ClassTag#
  [13..16): Int => _root_.scala.reflect.ClassTag.Int.


semanticdb/integration/src/main/scala/example/Flags.scala
---------------------------------------------------------
Language:
Scala212

Names:
[8..13): flags <= _root_.flags.
[22..27): scala => _root_.scala.
[28..36): language => _root_.scala.language.
[37..49): experimental => _root_.scala.language.experimental.
[50..56): macros => _root_.scala.language.experimental.macros.
[73..74): p <= _root_.flags.p.package.
[96..97): x <= _root_.flags.p.package.x.
[127..128): y <= _root_.flags.p.package.y.
[130..133): Int => _root_.scala.Int#
[144..145): z <= _root_.flags.p.package.z(Int).
[146..148): pp <= _root_.flags.p.package.z(Int).(pp)
[150..153): Int => _root_.scala.Int#
[165..166): m <= _root_.flags.p.package.m().
[167..169): TT <= _root_.flags.p.package.m().[TT]
[179..182): ??? => _root_.scala.Predef.`???`().
[200..201): C <= _root_.flags.p.package.C#
[203..204): T <= _root_.flags.p.package.C#[T]
[207..208): U <= _root_.flags.p.package.C#[U]
[210..211): V <= _root_.flags.p.package.C#[V]
[212..212):  <= _root_.flags.p.package.C#`<init>`(T,U,V).
[213..214): x <= _root_.flags.p.package.C#(x)
[216..217): T => _root_.flags.p.package.C#[T]
[219..220): y <= _root_.flags.p.package.C#(y)
[222..223): U => _root_.flags.p.package.C#[U]
[225..226): z <= _root_.flags.p.package.C#(z)
[228..229): V => _root_.flags.p.package.C#[V]
[241..245): this <= _root_.flags.p.package.C#`<init>`().
[254..254):  => _root_.flags.p.package.C#`<init>`(T,U,V).
[255..258): ??? => _root_.scala.Predef.`???`().
[260..263): ??? => _root_.scala.Predef.`???`().
[265..268): ??? => _root_.scala.Predef.`???`().
[278..279): w <= _root_.flags.p.package.C#w().
[281..284): Int => _root_.scala.Int#
[296..297): T <= _root_.flags.p.package.T#
[300..303): Int => _root_.scala.Int#
[311..312): U <= _root_.flags.p.package.U#
[316..319): Int => _root_.scala.Int#
[327..328): V <= _root_.flags.p.package.V#
[332..335): Int => _root_.scala.Int#
[350..351): X <= _root_.flags.p.package.X.
[366..367): Y <= _root_.flags.p.package.Y#
[367..367):  <= _root_.flags.p.package.Y#`<init>`().
[383..384): Z <= _root_.flags.p.package.Z#
[393..395): AA <= _root_.flags.p.package.AA#
[395..395):  <= _root_.flags.p.package.AA#`<init>`(Int,Int,Int).
[396..397): x <= _root_.flags.p.package.AA#(x)
[399..402): Int => _root_.scala.Int#
[408..409): y <= _root_.flags.p.package.AA#(y)
[411..414): Int => _root_.scala.Int#
[420..421): z <= _root_.flags.p.package.AA#(z)
[423..426): Int => _root_.scala.Int#
[436..437): S <= _root_.flags.p.package.S#
[439..450): specialized => _root_.scala.specialized#
[451..451):  => _root_.scala.specialized#`<init>`().
[451..452): T <= _root_.flags.p.package.S#[T]
[453..453):  <= _root_.flags.p.package.S#`<init>`().
[460..464): List => _root_.scala.collection.immutable.List.
[465..468): xs1 <= _root_.flags.p.package.xs1.xs1.
[472..475): ??? => _root_.scala.Predef.`???`().
[478..481): ??? => _root_.scala.Predef.`???`().
[495..499): List => _root_.scala.collection.immutable.List.
[500..503): xs2 <= local0_semanticdb_integration_src_main_scala_example_Flags_scala
[508..511): ??? => _root_.scala.Predef.`???`().

Symbols:
_root_.flags. => package flags.{+1 members}
_root_.flags.p.package. => packageobject package
_root_.flags.p.package.AA# => class AA
_root_.flags.p.package.AA#(x) => private param x: Int
  [0..3): Int => _root_.scala.Int#
_root_.flags.p.package.AA#(y) => val param y: Int
  [0..3): Int => _root_.scala.Int#
_root_.flags.p.package.AA#(z) => var param z_=: (x$1: Int): Unit
  [6..9): Int => _root_.scala.Int#
  [12..16): Unit => _root_.scala.Unit#
_root_.flags.p.package.AA#`<init>`(Int,Int,Int). => primaryctor <init>: (x: Int, y: Int, z: Int): AA
  [4..7): Int => _root_.scala.Int#
  [12..15): Int => _root_.scala.Int#
  [20..23): Int => _root_.scala.Int#
  [26..28): AA => _root_.flags.p.package.AA#
_root_.flags.p.package.C# => abstract class C
_root_.flags.p.package.C#(x) => private param x: T
  [0..1): T => _root_.flags.p.package.C#[T]
_root_.flags.p.package.C#(y) => private param y: U
  [0..1): U => _root_.flags.p.package.C#[U]
_root_.flags.p.package.C#(z) => private param z: V
  [0..1): V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#[T] => covariant typeparam T
_root_.flags.p.package.C#[U] => contravariant typeparam U
_root_.flags.p.package.C#[V] => typeparam V
_root_.flags.p.package.C#`<init>`(). => secondaryctor <init>: (): C[T, U, V]
  [4..5): C => _root_.flags.p.package.C#
  [6..7): T => _root_.flags.p.package.C#[T]
  [9..10): U => _root_.flags.p.package.C#[U]
  [12..13): V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#`<init>`(T,U,V). => primaryctor <init>: (x: T, y: U, z: V): C[T, U, V]
  [4..5): T => _root_.flags.p.package.C#[T]
  [10..11): U => _root_.flags.p.package.C#[U]
  [16..17): V => _root_.flags.p.package.C#[V]
  [20..21): C => _root_.flags.p.package.C#
  [22..23): T => _root_.flags.p.package.C#[T]
  [25..26): U => _root_.flags.p.package.C#[U]
  [28..29): V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#w(). => abstract def w: Int
  [0..3): Int => _root_.scala.Int#
_root_.flags.p.package.S# => class S
_root_.flags.p.package.S#[T] => typeparam T
_root_.flags.p.package.S#`<init>`(). => primaryctor <init>: (): S[T]
  [4..5): S => _root_.flags.p.package.S#
  [6..7): T => _root_.flags.p.package.S#[T]
_root_.flags.p.package.T# => type T: Int
  [0..3): Int => _root_.scala.Int#
_root_.flags.p.package.U# => abstract type U
_root_.flags.p.package.V# => abstract type V
_root_.flags.p.package.X. => final case object X
_root_.flags.p.package.Y# => final class Y
_root_.flags.p.package.Y#`<init>`(). => primaryctor <init>: (): Y
  [4..5): Y => _root_.flags.p.package.Y#
_root_.flags.p.package.Z# => sealed trait Z
_root_.flags.p.package.m(). => macro m: [TT] => Nothing
  [8..15): Nothing => _root_.scala.Nothing#
_root_.flags.p.package.m().[TT] => typeparam TT
_root_.flags.p.package.x. => private lazy val x: Int
  [0..3): Int => _root_.scala.Int#
_root_.flags.p.package.xs1.xs1. => val xs1: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.flags.p.package.y. => protected var y_=: (x$1: Int): Unit
  [6..9): Int => _root_.scala.Int#
  [12..16): Unit => _root_.scala.Unit#
_root_.flags.p.package.z(Int). => def z: (pp: Int): Int
  [5..8): Int => _root_.scala.Int#
  [11..14): Int => _root_.scala.Int#
_root_.flags.p.package.z(Int).(pp) => param pp: Int
  [0..3): Int => _root_.scala.Int#
_root_.scala. => package scala
_root_.scala.Int# => abstract final class Int
_root_.scala.Predef.`???`(). => def ???: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.scala.collection.immutable.List. => final object List
_root_.scala.language. => final object language
_root_.scala.language.experimental. => final object experimental
_root_.scala.language.experimental.macros. => implicit lazy val macros: macros
  [0..6): macros => _root_.scala.languageFeature.experimental.macros#
_root_.scala.specialized# => class specialized
_root_.scala.specialized#`<init>`(). => secondaryctor <init>: (): specialized
  [4..15): specialized => _root_.scala.specialized#
local0_semanticdb_integration_src_main_scala_example_Flags_scala => val xs2: Nothing
  [0..7): Nothing => _root_.scala.Nothing#

Synthetics:
[464..464): *.unapplySeq[Nothing]
  [0..1): * => _star_.
  [2..12): unapplySeq => _root_.scala.collection.generic.SeqFactory#unapplySeq(CC).
  [13..20): Nothing => _root_.scala.Nothing#
[499..499): *.unapplySeq[Nothing]
  [0..1): * => _star_.
  [2..12): unapplySeq => _root_.scala.collection.generic.SeqFactory#unapplySeq(CC).
  [13..20): Nothing => _root_.scala.Nothing#


semanticdb/integration/src/main/scala/example/Methods.scala
-----------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[24..29): scala => _root_.scala.
[30..34): math => _root_.scala.math.
[35..43): Ordering => _root_.scala.math.Ordering#;_root_.scala.math.Ordering.
[51..58): Methods <= _root_.example.Methods#
[59..60): T <= _root_.example.Methods#[T]
[62..62):  <= _root_.example.Methods#`<init>`().
[72..76): List <= _root_.example.Methods#List#
[77..78): T <= _root_.example.Methods#List#[T]
[79..79):  <= _root_.example.Methods#List#`<init>`().
[87..92): AList <= _root_.example.Methods#AList#
[93..94): T <= _root_.example.Methods#AList#[T]
[98..102): List => _root_.example.Methods#List#
[103..104): T => _root_.example.Methods#AList#[T]
[112..114): m1 <= _root_.example.Methods#m1().
[117..120): ??? => _root_.scala.Predef.`???`().
[127..129): m2 <= _root_.example.Methods#m2().
[134..137): ??? => _root_.scala.Predef.`???`().
[144..146): m3 <= _root_.example.Methods#m3(Int).
[147..148): x <= _root_.example.Methods#m3(Int).(x)
[150..153): Int => _root_.scala.Int#
[157..160): ??? => _root_.scala.Predef.`???`().
[167..169): m4 <= _root_.example.Methods#m4(Int,Int).
[170..171): x <= _root_.example.Methods#m4(Int,Int).(x)
[173..176): Int => _root_.scala.Int#
[178..179): y <= _root_.example.Methods#m4(Int,Int).(y)
[181..184): Int => _root_.scala.Int#
[188..191): ??? => _root_.scala.Predef.`???`().
[198..200): m5 <= _root_.example.Methods#m5(String).
[201..202): x <= _root_.example.Methods#m5(String).(x)
[204..210): String => _root_.scala.Predef.String#
[214..217): ??? => _root_.scala.Predef.`???`().
[224..226): m5 <= _root_.example.Methods#m5(Int).
[227..228): x <= _root_.example.Methods#m5(Int).(x)
[230..233): Int => _root_.scala.Int#
[237..240): ??? => _root_.scala.Predef.`???`().
[247..249): m6 <= _root_.example.Methods#m6(Int).
[250..251): x <= _root_.example.Methods#m6(Int).(x)
[253..256): Int => _root_.scala.Int#
[260..263): ??? => _root_.scala.Predef.`???`().
[270..272): m6 <= _root_.example.Methods#m6(List+1).
[273..274): x <= _root_.example.Methods#m6(List+1).(x)
[276..280): List => _root_.example.Methods#List#
[281..282): T => _root_.example.Methods#[T]
[287..290): ??? => _root_.scala.Predef.`???`().
[297..299): m6 <= _root_.example.Methods#m6(List+2).
[300..301): x <= _root_.example.Methods#m6(List+2).(x)
[303..308): scala => _root_.scala.
[309..313): List => _root_.scala.package.List#
[314..315): T => _root_.example.Methods#[T]
[320..323): ??? => _root_.scala.Predef.`???`().
[330..332): m7 <= _root_.example.Methods#m7(Methods,List,Ordering).
[333..334): U <= _root_.example.Methods#m7(Methods,List,Ordering).[U]
[336..344): Ordering => _root_.scala.math.Ordering#
[346..347): c <= _root_.example.Methods#m7(Methods,List,Ordering).(c)
[349..356): Methods => _root_.example.Methods#
[357..358): T => _root_.example.Methods#[T]
[361..362): l <= _root_.example.Methods#m7(Methods,List,Ordering).(l)
[364..368): List => _root_.example.Methods#List#
[369..370): U => _root_.example.Methods#m7(Methods,List,Ordering).[U]
[375..378): ??? => _root_.scala.Predef.`???`().
[385..392): `m8().` <= _root_.example.Methods#`m8().`().
[397..400): ??? => _root_.scala.Predef.`???`().
[409..416): `m9().` <= _root_.example.Methods#`m9().`#
[416..416):  <= _root_.example.Methods#`m9().`#`<init>`().
[423..425): m9 <= _root_.example.Methods#m9(`m9().`).
[426..427): x <= _root_.example.Methods#m9(`m9().`).(x)
[429..436): `m9().` => _root_.example.Methods#`m9().`#
[440..443): ??? => _root_.scala.Predef.`???`().
[450..453): m10 <= _root_.example.Methods#m10(AList).
[454..455): x <= _root_.example.Methods#m10(AList).(x)
[457..462): AList => _root_.example.Methods#AList#
[463..464): T => _root_.example.Methods#[T]
[469..472): ??? => _root_.scala.Predef.`???`().
[479..483): m11a <= _root_.example.Methods#m11a(.type).
[484..485): x <= _root_.example.Methods#m11a(.type).(x)
[487..493): Predef => _root_.scala.Predef.
[502..505): ??? => _root_.scala.Predef.`???`().
[512..516): m11b <= _root_.example.Methods#m11b(.type).
[517..518): x <= _root_.example.Methods#m11b(.type).(x)
[520..527): Example => _root_.example.Example.
[536..539): ??? => _root_.scala.Predef.`???`().
[546..550): m12a <= _root_.example.Methods#m12a({}).
[551..552): x <= _root_.example.Methods#m12a({}).(x)
[560..563): ??? => _root_.scala.Predef.`???`().
[570..574): m12b <= _root_.example.Methods#m12b({}).
[575..576): x <= _root_.example.Methods#m12b({}).(x)
[584..585): x <= _root_.example.Methods#$anon#x.
[587..590): Int => _root_.scala.Int#
[596..599): ??? => _root_.scala.Predef.`???`().
[606..609): m13 <= _root_.example.Methods#m13(Int).
[610..611): x <= _root_.example.Methods#m13(Int).(x)
[613..616): Int => _root_.scala.Int#
[618..627): unchecked => _root_.scala.unchecked#
[627..627):  => _root_.scala.unchecked#`<init>`().
[631..634): ??? => _root_.scala.Predef.`???`().
[641..644): m14 <= _root_.example.Methods#m14(T).
[645..646): x <= _root_.example.Methods#m14(T).(x)
[648..649): T => _root_.example.Methods#m14(T).(x)T#
[665..666): T <= _root_.example.Methods#m14(T).(x)T#
[672..675): ??? => _root_.scala.Predef.`???`().
[682..685): m15 <= _root_.example.Methods#m15(=>Int).
[686..687): x <= _root_.example.Methods#m15(=>Int).(x)
[692..695): Int => _root_.scala.Int#
[699..702): ??? => _root_.scala.Predef.`???`().
[709..712): m16 <= _root_.example.Methods#m16(Int*).
[713..714): x <= _root_.example.Methods#m16(Int*).(x)
[716..719): Int => _root_.scala.`<repeated>`#
[724..727): ??? => _root_.scala.Predef.`???`().

Messages:
[648..668): [warning] the existential type T forSome { type T }, which cannot be expressed by wildcards,  should be enabled
by making the implicit value scala.language.existentials visible.
[648..668): [warning] the existential type T forSome { type T }, which cannot be expressed by wildcards,  should be enabled
by making the implicit value scala.language.existentials visible.
This can be achieved by adding the import clause 'import scala.language.existentials'
or by setting the compiler option -language:existentials.
See the Scaladoc for value scala.language.existentials for a discussion
why the feature should be explicitly enabled.

Symbols:
_root_.example. => package example.{+7 members}
_root_.example.Example. => final object Example
_root_.example.Methods# => class Methods
_root_.example.Methods#$anon#x. => abstract val x: Int
  [0..3): Int => _root_.scala.Int#
_root_.example.Methods#AList# => type AList: [T] => Methods.this.List[T]
  [7..14): Methods => _root_.example.Methods#
  [20..24): List => _root_.example.Methods#List#
  [25..26): T => _root_.example.Methods#AList#[T]
_root_.example.Methods#AList#[T] => typeparam T
_root_.example.Methods#List# => class List
_root_.example.Methods#List#[T] => typeparam T
_root_.example.Methods#List#`<init>`(). => primaryctor <init>: (): Methods.this.List[T]
  [4..11): Methods => _root_.example.Methods#
  [17..21): List => _root_.example.Methods#List#
  [22..23): T => _root_.example.Methods#List#[T]
_root_.example.Methods#[T] => typeparam T
_root_.example.Methods#`<init>`(). => primaryctor <init>: (): Methods[T]
  [4..11): Methods => _root_.example.Methods#
  [12..13): T => _root_.example.Methods#[T]
_root_.example.Methods#`m8().`(). => def m8().: (): Nothing
  [4..11): Nothing => _root_.scala.Nothing#
_root_.example.Methods#`m9().`# => class m9().
_root_.example.Methods#`m9().`#`<init>`(). => primaryctor <init>: (): Methods.this.`m9().`
  [4..11): Methods => _root_.example.Methods#
  [17..24): `m9().` => _root_.example.Methods#`m9().`#
_root_.example.Methods#m1(). => def m1: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m10(AList). => def m10: (x: Methods.this.AList[T]): Nothing
  [4..11): Methods => _root_.example.Methods#
  [17..22): AList => _root_.example.Methods#AList#
  [23..24): T => _root_.example.Methods#[T]
  [28..35): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m10(AList).(x) => param x: Methods.this.AList[T]
  [0..7): Methods => _root_.example.Methods#
  [13..18): AList => _root_.example.Methods#AList#
  [19..20): T => _root_.example.Methods#[T]
_root_.example.Methods#m11a(.type). => def m11a: (x: Predef.type): Nothing
  [4..10): Predef => _root_.scala.Predef.
  [18..25): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m11a(.type).(x) => param x: Predef.type
  [0..6): Predef => _root_.scala.Predef.
_root_.example.Methods#m11b(.type). => def m11b: (x: Example.type): Nothing
  [4..11): Example => _root_.example.Example.
  [19..26): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m11b(.type).(x) => param x: Example.type
  [0..7): Example => _root_.example.Example.
_root_.example.Methods#m12a({}). => def m12a: (x: AnyRef{}): Nothing
  [4..10): AnyRef => _root_.scala.AnyRef#
  [15..22): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m12a({}).(x) => param x: AnyRef{}
  [0..6): AnyRef => _root_.scala.AnyRef#
_root_.example.Methods#m12b({}). => def m12b: (x: AnyRef{val x: Int}): Nothing
  [4..10): AnyRef => _root_.scala.AnyRef#
  [15..16): x => _root_.example.Methods#$anon#x.
  [25..32): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m12b({}).(x) => param x: AnyRef{val x: Int}
  [0..6): AnyRef => _root_.scala.AnyRef#
  [11..12): x => _root_.example.Methods#$anon#x.
_root_.example.Methods#m13(Int). => def m13: (x: Int): Nothing
  [4..7): Int => _root_.scala.Int#
  [10..17): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m13(Int).(x) => param x: Int
  [0..3): Int => _root_.scala.Int#
_root_.example.Methods#m14(T). => def m14: (x: T forSome { type T }): Nothing
  [27..34): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m14(T).(x) => param x: T forSome { type T }
_root_.example.Methods#m14(T).(x)T# => abstract type T
_root_.example.Methods#m15(=>Int). => def m15: (x: =>Int): Nothing
  [6..9): Int => _root_.scala.Int#
  [12..19): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m15(=>Int).(x) => param x: =>Int
  [2..5): Int => _root_.scala.Int#
_root_.example.Methods#m16(Int*). => def m16: (x: Int*): Nothing
  [4..7): Int => _root_.scala.Int#
  [11..18): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m16(Int*).(x) => param x: Int*
  [0..3): Int => _root_.scala.Int#
_root_.example.Methods#m2(). => def m2: (): Nothing
  [4..11): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m3(Int). => def m3: (x: Int): Nothing
  [4..7): Int => _root_.scala.Int#
  [10..17): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m3(Int).(x) => param x: Int
  [0..3): Int => _root_.scala.Int#
_root_.example.Methods#m4(Int,Int). => def m4: (x: Int)(y: Int): Nothing
  [4..7): Int => _root_.scala.Int#
  [12..15): Int => _root_.scala.Int#
  [18..25): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m4(Int,Int).(x) => param x: Int
  [0..3): Int => _root_.scala.Int#
_root_.example.Methods#m4(Int,Int).(y) => param y: Int
  [0..3): Int => _root_.scala.Int#
_root_.example.Methods#m5(Int). => def m5: (x: Int): Nothing
  [4..7): Int => _root_.scala.Int#
  [10..17): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m5(Int).(x) => param x: Int
  [0..3): Int => _root_.scala.Int#
_root_.example.Methods#m5(String). => def m5: (x: String): Nothing
  [4..10): String => _root_.scala.Predef.String#
  [13..20): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m5(String).(x) => param x: String
  [0..6): String => _root_.scala.Predef.String#
_root_.example.Methods#m6(Int). => def m6: (x: Int): Nothing
  [4..7): Int => _root_.scala.Int#
  [10..17): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m6(Int).(x) => param x: Int
  [0..3): Int => _root_.scala.Int#
_root_.example.Methods#m6(List+1). => def m6: (x: Methods.this.List[T]): Nothing
  [4..11): Methods => _root_.example.Methods#
  [17..21): List => _root_.example.Methods#List#
  [22..23): T => _root_.example.Methods#[T]
  [27..34): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m6(List+1).(x) => param x: Methods.this.List[T]
  [0..7): Methods => _root_.example.Methods#
  [13..17): List => _root_.example.Methods#List#
  [18..19): T => _root_.example.Methods#[T]
_root_.example.Methods#m6(List+2). => def m6: (x: List[T]): Nothing
  [4..8): List => _root_.scala.package.List#
  [9..10): T => _root_.example.Methods#[T]
  [14..21): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m6(List+2).(x) => param x: List[T]
  [0..4): List => _root_.scala.package.List#
  [5..6): T => _root_.example.Methods#[T]
_root_.example.Methods#m7(Methods,List,Ordering). => def m7: [U] => (c: Methods[T], l: Methods.this.List[U])(implicit evidence$1: Ordering[U]): Nothing
  [11..18): Methods => _root_.example.Methods#
  [19..20): T => _root_.example.Methods#[T]
  [26..33): Methods => _root_.example.Methods#
  [39..43): List => _root_.example.Methods#List#
  [44..45): U => _root_.example.Methods#m7(Methods,List,Ordering).[U]
  [69..77): Ordering => _root_.scala.math.Ordering#
  [78..79): U => _root_.example.Methods#m7(Methods,List,Ordering).[U]
  [83..90): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m7(Methods,List,Ordering).(c) => param c: Methods[T]
  [0..7): Methods => _root_.example.Methods#
  [8..9): T => _root_.example.Methods#[T]
_root_.example.Methods#m7(Methods,List,Ordering).(l) => param l: Methods.this.List[U]
  [0..7): Methods => _root_.example.Methods#
  [13..17): List => _root_.example.Methods#List#
  [18..19): U => _root_.example.Methods#m7(Methods,List,Ordering).[U]
_root_.example.Methods#m7(Methods,List,Ordering).[U] => typeparam U
_root_.example.Methods#m9(`m9().`). => def m9: (x: Methods.this.`m9().`): Nothing
  [4..11): Methods => _root_.example.Methods#
  [17..24): `m9().` => _root_.example.Methods#`m9().`#
  [27..34): Nothing => _root_.scala.Nothing#
_root_.example.Methods#m9(`m9().`).(x) => param x: Methods.this.`m9().`
  [0..7): Methods => _root_.example.Methods#
  [13..20): `m9().` => _root_.example.Methods#`m9().`#
_root_.scala. => package scala
_root_.scala.Int# => abstract final class Int
_root_.scala.Predef. => final object Predef
_root_.scala.Predef.String# => type String: String
  [0..6): String => _root_.java.lang.String#
_root_.scala.Predef.`???`(). => def ???: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.scala.math. => package math
_root_.scala.math.Ordering# => trait Ordering
_root_.scala.package.List# => val List: List.type
  [0..4): List => _root_.scala.collection.immutable.List.
_root_.scala.unchecked# => class unchecked
_root_.scala.unchecked#`<init>`(). => primaryctor <init>: (): unchecked
  [4..13): unchecked => _root_.scala.unchecked#


semanticdb/integration/src/main/scala/example/Overrides.scala
-------------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[23..24): A <= _root_.example.A#
[31..34): foo <= _root_.example.A#foo().
[36..39): Int => _root_.scala.Int#
[48..49): B <= _root_.example.B#
[49..49):  <= _root_.example.B#`<init>`().
[60..61): A => _root_.example.A#
[62..62):  => _root_.java.lang.Object#`<init>`().
[68..71): foo <= _root_.example.B#foo().
[73..76): Int => _root_.scala.Int#

Symbols:
_root_.example. => package example.{+7 members}
_root_.example.A# => trait A.{+1 members}
_root_.example.A#foo(). => abstract def foo: Int
  [0..3): Int => _root_.scala.Int#
_root_.example.B# => class B
_root_.example.B#`<init>`(). => primaryctor <init>: (): B
  [4..5): B => _root_.example.B#
_root_.example.B#foo(). => def foo: Int
  override _root_.example.A#foo().
  [0..3): Int => _root_.scala.Int#
_root_.java.lang.Object#`<init>`(). => javadefined primaryctor <init>: (): Object
  [4..10): Object => _root_.java.lang.Object#
_root_.scala.Int# => abstract final class Int


semanticdb/integration/src/main/scala/example/Synthetic.scala
-------------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[23..32): Synthetic <= _root_.example.Synthetic#
[33..33):  <= _root_.example.Synthetic#`<init>`().
[37..41): List => _root_.scala.collection.immutable.List.
[45..48): map => _root_.scala.collection.immutable.List#map(Function1,CanBuildFrom).
[51..52): + => _root_.scala.Int#`+`(Int).
[58..63): Array => _root_.scala.Array.
[64..69): empty => _root_.scala.Array.empty(ClassTag).
[70..73): Int => _root_.scala.Int#
[75..85): headOption => _root_.scala.collection.TraversableLike#headOption().
[95..106): stripPrefix => _root_.scala.collection.immutable.StringLike#stripPrefix(String).

Symbols:
_root_.example. => package example.{+7 members}
_root_.example.Synthetic# => class Synthetic
_root_.example.Synthetic#`<init>`(). => primaryctor <init>: (): Synthetic
  [4..13): Synthetic => _root_.example.Synthetic#
_root_.scala.Array. => final object Array
_root_.scala.Array.empty(ClassTag). => def empty: [T] => (implicit evidence$1: ClassTag[T]): Array[T]
  [29..37): ClassTag => _root_.scala.reflect.ClassTag#
  [38..39): T => _root_.scala.Array.empty(ClassTag).[T]
  [43..48): Array => _root_.scala.Array#
  [49..50): T => _root_.scala.Array.empty(ClassTag).[T]
_root_.scala.Int# => abstract final class Int
_root_.scala.Int#`+`(Int). => abstract def +: (x: Int): Int
  [4..7): Int => _root_.scala.Int#
  [10..13): Int => _root_.scala.Int#
_root_.scala.collection.TraversableLike#headOption(). => def headOption: Option[A]
  [0..6): Option => _root_.scala.Option#
  [7..8): A => _root_.scala.collection.TraversableLike#[A]
_root_.scala.collection.immutable.List#map(Function1,CanBuildFrom). => final def map: [B, That] => (f: Function1[A, B])(implicit bf: CanBuildFrom[List[A], B, That]): That
  [17..26): Function1 => _root_.scala.Function1#
  [27..28): A => _root_.scala.collection.immutable.List#[A]
  [30..31): B => _root_.scala.collection.immutable.List#map(Function1,CanBuildFrom).[B]
  [47..59): CanBuildFrom => _root_.scala.collection.generic.CanBuildFrom#
  [60..64): List => _root_.scala.collection.immutable.List#
  [65..66): A => _root_.scala.collection.immutable.List#[A]
  [69..70): B => _root_.scala.collection.immutable.List#map(Function1,CanBuildFrom).[B]
  [72..76): That => _root_.scala.collection.immutable.List#map(Function1,CanBuildFrom).[That]
  [80..84): That => _root_.scala.collection.immutable.List#map(Function1,CanBuildFrom).[That]
_root_.scala.collection.immutable.List. => final object List
_root_.scala.collection.immutable.StringLike#stripPrefix(String). => def stripPrefix: (prefix: String): String
  [9..15): String => _root_.scala.Predef.String#
  [18..24): String => _root_.java.lang.String#

Synthetics:
[41..41): *.apply[Int]
  [0..1): * => _star_.
  [2..7): apply => _root_.scala.collection.immutable.List.apply(A*).
  [8..11): Int => _root_.scala.Int#
[48..48): *[Int, List[Int]]
  [0..1): * => _star_.
  [2..5): Int => _root_.scala.Int#
  [12..15): Int => _root_.scala.Int#
  [7..11): List => _root_.scala.collection.immutable.List#
[55..55): *(scala.collection.immutable.List.canBuildFrom[Int])
  [0..1): * => _star_.
  [47..50): Int => _root_.scala.Int#
  [34..46): canBuildFrom => _root_.scala.collection.immutable.List.canBuildFrom().
[58..74): scala.Predef.intArrayOps(*)
  [13..24): intArrayOps => _root_.scala.Predef.intArrayOps(Array).
  [25..26): * => _star_.
[74..74): *(((ClassTag.Int): ClassTag[Int]))
  [0..1): * => _star_.
  [28..31): Int => _root_.scala.Int#
  [19..27): ClassTag => _root_.scala.reflect.ClassTag#
  [13..16): Int => _root_.scala.reflect.ClassTag.Int.
[88..94): scala.Predef.augmentString(*)
  [13..26): augmentString => _root_.scala.Predef.augmentString(String).
  [27..28): * => _star_.


semanticdb/integration/src/main/scala/example/Types.scala
---------------------------------------------------------
Language:
Scala212

Names:
[8..13): types <= _root_.types.
[22..27): scala => _root_.scala.
[28..36): language => _root_.scala.language.
[37..49): existentials => _root_.scala.language.existentials.
[57..62): scala => _root_.scala.
[63..71): language => _root_.scala.language.
[72..83): higherKinds => _root_.scala.language.higherKinds.
[91..94): ann <= _root_.types.ann#
[95..96): T <= _root_.types.ann#[T]
[97..97):  <= _root_.types.ann#`<init>`(T).
[98..99): x <= _root_.types.ann#(x)
[101..102): T => _root_.types.ann#[T]
[112..117): scala => _root_.scala.
[118..128): annotation => _root_.scala.annotation.
[129..145): StaticAnnotation => _root_.scala.annotation.StaticAnnotation#
[152..156): ann1 <= _root_.types.ann1#
[157..157):  <= _root_.types.ann1#`<init>`().
[165..170): scala => _root_.scala.
[171..181): annotation => _root_.scala.annotation.
[182..198): StaticAnnotation => _root_.scala.annotation.StaticAnnotation#
[205..209): ann2 <= _root_.types.ann2#
[210..210):  <= _root_.types.ann2#`<init>`().
[218..223): scala => _root_.scala.
[224..234): annotation => _root_.scala.annotation.
[235..251): StaticAnnotation => _root_.scala.annotation.StaticAnnotation#
[259..260): B <= _root_.types.B#
[268..269): C <= _root_.types.C#
[277..278): P <= _root_.types.P#
[279..279):  <= _root_.types.P#`<init>`().
[289..290): C <= _root_.types.P#C#
[290..290):  <= _root_.types.P#C#`<init>`().
[299..300): X <= _root_.types.P#X#
[300..300):  <= _root_.types.P#X#`<init>`().
[307..308): x <= _root_.types.P#x.
[315..316): X => _root_.types.P#X#
[317..317):  => _root_.types.P#X#`<init>`().
[326..327): T <= _root_.types.T#
[328..328):  <= _root_.types.T#`<init>`().
[338..339): C <= _root_.types.T#C#
[339..339):  <= _root_.types.T#C#`<init>`().
[348..349): X <= _root_.types.T#X#
[349..349):  <= _root_.types.T#X#`<init>`().
[356..357): x <= _root_.types.T#x.
[364..365): X => _root_.types.T#X#
[366..366):  => _root_.types.T#X#`<init>`().
[376..380): Test <= _root_.types.Test.
[391..392): M <= _root_.types.Test.M#
[393..393):  <= _root_.types.Test.M#`<init>`().
[403..404): m <= _root_.types.Test.M#m().
[406..409): Int => _root_.scala.Int#
[412..415): ??? => _root_.scala.Predef.`???`().
[429..430): N <= _root_.types.Test.N#
[431..431):  <= _root_.types.Test.N#`<init>`().
[441..442): n <= _root_.types.Test.N#n().
[444..447): Int => _root_.scala.Int#
[450..453): ??? => _root_.scala.Predef.`???`().
[467..468): C <= _root_.types.Test.C#
[469..469):  <= _root_.types.Test.C#`<init>`().
[477..478): M => _root_.types.Test.M#
[479..479):  => _root_.types.Test.M#`<init>`().
[489..490): p <= _root_.types.Test.C#p.
[497..498): P => _root_.types.P#
[498..498):  => _root_.types.P#`<init>`().
[507..508): x <= _root_.types.Test.C#x.
[511..512): p => _root_.types.Test.C#p.
[513..514): x => _root_.types.P#x.
[524..532): typeRef1 <= _root_.types.Test.C#typeRef1.
[534..535): C => _root_.types.Test.C#
[538..541): ??? => _root_.scala.Predef.`???`().
[550..558): typeRef2 <= _root_.types.Test.C#typeRef2.
[560..561): p => _root_.types.Test.C#p.
[562..563): C => _root_.types.P#C#
[566..569): ??? => _root_.scala.Predef.`???`().
[578..586): typeRef3 <= _root_.types.Test.C#typeRef3.
[588..589): T => _root_.types.T#
[590..591): C => _root_.types.T#C#
[594..597): ??? => _root_.scala.Predef.`???`().
[606..614): typeRef4 <= _root_.types.Test.C#typeRef4.
[616..620): List => _root_.scala.package.List#
[621..624): Int => _root_.scala.Int#
[628..631): ??? => _root_.scala.Predef.`???`().
[641..652): singleType1 <= _root_.types.Test.C#singleType1.
[654..655): x => _root_.types.Test.C#x.
[663..666): ??? => _root_.scala.Predef.`???`().
[675..686): singleType2 <= _root_.types.Test.C#singleType2.
[688..689): p => _root_.types.Test.C#p.
[690..691): x => _root_.types.P#x.
[699..702): ??? => _root_.scala.Predef.`???`().
[712..721): thisType1 <= _root_.types.Test.C#thisType1.
[735..738): ??? => _root_.scala.Predef.`???`().
[747..756): thisType2 <= _root_.types.Test.C#thisType2.
[758..759): C => _root_.types.Test.C#
[772..775): ??? => _root_.scala.Predef.`???`().
[785..795): superType1 <= _root_.types.Test.C#superType1.
[804..805): m => _root_.types.Test.M#m().
[814..824): superType2 <= _root_.types.Test.C#superType2.
[833..834): M => _root_.types.Test.C#
[836..837): m => _root_.types.Test.M#m().
[846..856): superType3 <= _root_.types.Test.C#superType3.
[859..860): C => _root_.types.Test.C#
[867..868): M => _root_.types.Test.C#
[870..871): m => _root_.types.Test.M#m().
[881..894): compoundType1 <= _root_.types.Test.C#compoundType1.
[902..903): k <= _root_.types.Test.C#$anon#k().
[905..908): Int => _root_.scala.Int#
[913..916): ??? => _root_.scala.Predef.`???`().
[925..938): compoundType2 <= _root_.types.Test.C#compoundType2.
[940..941): M => _root_.types.Test.M#
[947..948): N => _root_.types.Test.N#
[951..954): ??? => _root_.scala.Predef.`???`().
[963..976): compoundType3 <= _root_.types.Test.C#compoundType3.
[978..979): M => _root_.types.Test.M#
[985..986): N => _root_.types.Test.N#
[993..994): k <= _root_.types.Test.C#$anon#k().
[996..999): Int => _root_.scala.Int#
[1004..1007): ??? => _root_.scala.Predef.`???`().
[1017..1025): annType1 <= _root_.types.Test.C#annType1.
[1027..1028): T => _root_.types.T#
[1030..1033): ann => _root_.types.ann#
[1033..1033):  => _root_.types.ann#`<init>`(T).
[1040..1043): ??? => _root_.scala.Predef.`???`().
[1052..1060): annType2 <= _root_.types.Test.C#annType2.
[1062..1063): T => _root_.types.T#
[1065..1069): ann1 => _root_.types.ann1#
[1070..1070):  => _root_.types.ann1#`<init>`().
[1071..1075): ann2 => _root_.types.ann2#
[1076..1076):  => _root_.types.ann2#`<init>`().
[1078..1081): ??? => _root_.scala.Predef.`???`().
[1091..1107): existentialType1 <= _root_.types.Test.C#existentialType1.
[1109..1110): T => _root_.types.Test.C#existentialType1.T#
[1126..1127): T <= _root_.types.Test.C#existentialType1.T#
[1132..1135): ??? => _root_.scala.Predef.`???`().
[1145..1156): typeLambda1 <= _root_.types.Test.C#typeLambda1().
[1157..1158): M <= _root_.types.Test.C#typeLambda1().[M]
[1165..1168): ??? => _root_.scala.Predef.`???`().
[1173..1184): typeLambda1 => _root_.types.Test.C#typeLambda1().
[1193..1194): L <= _root_.types.Test.C#$anon#L#
[1195..1196): T <= _root_.types.Test.C#$anon#L#[T]
[1200..1204): List => _root_.scala.package.List#
[1205..1206): T => _root_.types.Test.C#$anon#L#[T]
[1211..1212): L => _root_.types.Test.C#$anon#L#
[1226..1240): ClassInfoType1 <= _root_.types.Test.C#ClassInfoType1.
[1251..1265): ClassInfoType2 <= _root_.types.Test.C#ClassInfoType2#
[1266..1266):  <= _root_.types.Test.C#ClassInfoType2#`<init>`().
[1274..1275): B => _root_.types.B#
[1276..1276):  => _root_.types.B#`<init>`().
[1282..1283): x <= _root_.types.Test.C#ClassInfoType2#x().
[1301..1315): ClassInfoType3 <= _root_.types.Test.C#ClassInfoType3#
[1316..1317): T <= _root_.types.Test.C#ClassInfoType3#[T]
[1331..1341): MethodType <= _root_.types.Test.C#MethodType.
[1354..1356): x1 <= _root_.types.Test.C#MethodType.x1().
[1358..1361): Int => _root_.scala.Int#
[1364..1367): ??? => _root_.scala.Predef.`???`().
[1378..1380): x2 <= _root_.types.Test.C#MethodType.x2().
[1382..1385): Int => _root_.scala.Int#
[1388..1391): ??? => _root_.scala.Predef.`???`().
[1402..1404): m3 <= _root_.types.Test.C#MethodType.m3().
[1406..1409): Int => _root_.scala.Int#
[1412..1415): ??? => _root_.scala.Predef.`???`().
[1426..1428): m4 <= _root_.types.Test.C#MethodType.m4().
[1432..1435): Int => _root_.scala.Int#
[1438..1441): ??? => _root_.scala.Predef.`???`().
[1452..1454): m5 <= _root_.types.Test.C#MethodType.m5(Int).
[1455..1456): x <= _root_.types.Test.C#MethodType.m5(Int).(x)
[1458..1461): Int => _root_.scala.Int#
[1464..1467): Int => _root_.scala.Int#
[1470..1473): ??? => _root_.scala.Predef.`???`().
[1484..1486): m6 <= _root_.types.Test.C#MethodType.m6(T).
[1487..1488): T <= _root_.types.Test.C#MethodType.m6(T).[T]
[1490..1491): x <= _root_.types.Test.C#MethodType.m6(T).(x)
[1493..1494): T => _root_.types.Test.C#MethodType.m6(T).[T]
[1497..1498): T => _root_.types.Test.C#MethodType.m6(T).[T]
[1501..1504): ??? => _root_.scala.Predef.`???`().
[1523..1533): ByNameType <= _root_.types.Test.C#ByNameType.
[1546..1548): m1 <= _root_.types.Test.C#ByNameType.m1(=>Int).
[1549..1550): x <= _root_.types.Test.C#ByNameType.m1(=>Int).(x)
[1555..1558): Int => _root_.scala.Int#
[1561..1564): Int => _root_.scala.Int#
[1567..1570): ??? => _root_.scala.Predef.`???`().
[1593..1605): RepeatedType <= _root_.types.Test.C#RepeatedType#
[1605..1605):  <= _root_.types.Test.C#RepeatedType#`<init>`(String*).
[1606..1607): s <= _root_.types.Test.C#RepeatedType#(s)
[1609..1615): String => _root_.scala.`<repeated>`#
[1630..1632): m1 <= _root_.types.Test.C#RepeatedType#m1(Int*).
[1633..1634): x <= _root_.types.Test.C#RepeatedType#m1(Int*).(x)
[1636..1639): Int => _root_.scala.`<repeated>`#
[1643..1646): Int => _root_.scala.Int#
[1649..1650): s => _root_.types.Test.C#RepeatedType#(s)
[1651..1657): length => _root_.scala.collection.SeqLike#length().
[1676..1684): TypeType <= _root_.types.Test.C#TypeType.
[1698..1700): T1 <= _root_.types.Test.C#TypeType.T1#
[1711..1713): m2 <= _root_.types.Test.C#TypeType.m2().
[1714..1716): T2 <= _root_.types.Test.C#TypeType.m2().[T2]
[1720..1721): C => _root_.types.Test.C#
[1725..1726): C => _root_.types.Test.C#
[1730..1733): ??? => _root_.scala.Predef.`???`().
[1744..1746): m3 <= _root_.types.Test.C#TypeType.m3().
[1747..1749): M3 <= _root_.types.Test.C#TypeType.m3().[M3]
[1756..1759): ??? => _root_.scala.Predef.`???`().
[1771..1773): T4 <= _root_.types.Test.C#TypeType.T4#
[1776..1777): C => _root_.types.Test.C#
[1789..1791): T5 <= _root_.types.Test.C#TypeType.T5#
[1792..1793): U <= _root_.types.Test.C#TypeType.T5#[U]
[1797..1798): U => _root_.types.Test.C#TypeType.T5#[U]
[1819..1826): Literal <= _root_.types.Test.Literal.
[1843..1846): int <= _root_.types.Test.Literal.int.
[1865..1869): long <= _root_.types.Test.Literal.long.
[1889..1894): float <= _root_.types.Test.Literal.float.
[1914..1920): double <= _root_.types.Test.Literal.double.
[1940..1943): nil <= _root_.types.Test.Literal.nil.
[1965..1969): char <= _root_.types.Test.Literal.char.
[1990..1996): string <= _root_.types.Test.Literal.string.
[2017..2021): bool <= _root_.types.Test.Literal.bool.
[2043..2047): unit <= _root_.types.Test.Literal.unit.
[2067..2075): javaEnum <= _root_.types.Test.Literal.javaEnum.
[2078..2082): java => _root_.java.
[2083..2086): nio => _root_.java.nio.
[2087..2091): file => _root_.java.nio.file.
[2092..2102): LinkOption => _root_.java.nio.file.LinkOption.
[2103..2117): NOFOLLOW_LINKS => _root_.java.nio.file.LinkOption.NOFOLLOW_LINKS.
[2132..2139): clazzOf <= _root_.types.Test.Literal.clazzOf.
[2142..2149): classOf => _root_.scala.Predef.classOf().
[2150..2156): Option => _root_.scala.Option#
[2157..2160): Int => _root_.scala.Int#

Symbols:
_root_.java. => package java
_root_.java.nio. => package nio
_root_.java.nio.file. => package file
_root_.java.nio.file.LinkOption. => final javadefined object LinkOption
_root_.java.nio.file.LinkOption.NOFOLLOW_LINKS. => final javadefined val NOFOLLOW_LINKS: LinkOption
  [0..10): LinkOption => _root_.java.nio.file.LinkOption#
_root_.scala. => package scala
_root_.scala.Int# => abstract final class Int
_root_.scala.Option# => abstract sealed class Option
_root_.scala.Predef.`???`(). => def ???: Nothing
  [0..7): Nothing => _root_.scala.Nothing#
_root_.scala.Predef.classOf(). => def classOf: [T] => Class[T]
  [7..12): Class => _root_.scala.Predef.Class#
  [13..14): T => _root_.scala.Predef.classOf().[T]
_root_.scala.annotation. => package annotation
_root_.scala.annotation.StaticAnnotation# => trait StaticAnnotation
_root_.scala.collection.SeqLike#length(). => abstract def length: Int
  [0..3): Int => _root_.scala.Int#
_root_.scala.language. => final object language
_root_.scala.language.existentials. => implicit lazy val existentials: existentials
  [0..12): existentials => _root_.scala.languageFeature.existentials#
_root_.scala.language.higherKinds. => implicit lazy val higherKinds: higherKinds
  [0..11): higherKinds => _root_.scala.languageFeature.higherKinds#
_root_.scala.package.List# => val List: List.type
  [0..4): List => _root_.scala.collection.immutable.List.
_root_.types. => package types.{+8 members}
_root_.types.B# => class B
_root_.types.B#`<init>`(). => primaryctor <init>: (): B
  [4..5): B => _root_.types.B#
_root_.types.C# => class C
_root_.types.C#`<init>`(). => primaryctor <init>: (): C
  [4..5): C => _root_.types.C#
_root_.types.P# => class P
_root_.types.P#C# => class C
_root_.types.P#C#`<init>`(). => primaryctor <init>: (): P.this.C
  [4..5): P => _root_.types.P#
  [11..12): C => _root_.types.P#C#
_root_.types.P#X# => class X
_root_.types.P#X#`<init>`(). => primaryctor <init>: (): P.this.X
  [4..5): P => _root_.types.P#
  [11..12): X => _root_.types.P#X#
_root_.types.P#`<init>`(). => primaryctor <init>: (): P
  [4..5): P => _root_.types.P#
_root_.types.P#x. => val x: P.this.X
  [0..1): P => _root_.types.P#
  [7..8): X => _root_.types.P#X#
_root_.types.T# => class T
_root_.types.T#C# => class C
_root_.types.T#C#`<init>`(). => primaryctor <init>: (): T.this.C
  [4..5): T => _root_.types.T#
  [11..12): C => _root_.types.T#C#
_root_.types.T#X# => class X
_root_.types.T#X#`<init>`(). => primaryctor <init>: (): T.this.X
  [4..5): T => _root_.types.T#
  [11..12): X => _root_.types.T#X#
_root_.types.T#`<init>`(). => primaryctor <init>: (): T
  [4..5): T => _root_.types.T#
_root_.types.T#x. => val x: T.this.X
  [0..1): T => _root_.types.T#
  [7..8): X => _root_.types.T#X#
_root_.types.Test. => final object Test
_root_.types.Test.C# => class C
_root_.types.Test.C#$anon#L# => type L: [T] => List[T]
  [7..11): List => _root_.scala.package.List#
  [12..13): T => _root_.types.Test.C#$anon#L#[T]
_root_.types.Test.C#$anon#L#[T] => typeparam T
_root_.types.Test.C#$anon#k(). => abstract def k: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#ByNameType. => final object ByNameType
_root_.types.Test.C#ByNameType.m1(=>Int). => def m1: (x: =>Int): Int
  [6..9): Int => _root_.scala.Int#
  [12..15): Int => _root_.scala.Int#
_root_.types.Test.C#ByNameType.m1(=>Int).(x) => param x: =>Int
  [2..5): Int => _root_.scala.Int#
_root_.types.Test.C#ClassInfoType1. => final object ClassInfoType1
_root_.types.Test.C#ClassInfoType2# => class ClassInfoType2
_root_.types.Test.C#ClassInfoType2#`<init>`(). => primaryctor <init>: (): C.this.ClassInfoType2
  [4..5): C => _root_.types.Test.C#
  [11..25): ClassInfoType2 => _root_.types.Test.C#ClassInfoType2#
_root_.types.Test.C#ClassInfoType2#x(). => def x: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#ClassInfoType3# => trait ClassInfoType3
_root_.types.Test.C#ClassInfoType3#[T] => typeparam T
_root_.types.Test.C#MethodType. => final object MethodType
_root_.types.Test.C#MethodType.m3(). => def m3: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m4(). => def m4: (): Int
  [4..7): Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m5(Int). => def m5: (x: Int): Int
  [4..7): Int => _root_.scala.Int#
  [10..13): Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m5(Int).(x) => param x: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m6(T). => def m6: [T] => (x: T): T
  [11..12): T => _root_.types.Test.C#MethodType.m6(T).[T]
  [15..16): T => _root_.types.Test.C#MethodType.m6(T).[T]
_root_.types.Test.C#MethodType.m6(T).(x) => param x: T
  [0..1): T => _root_.types.Test.C#MethodType.m6(T).[T]
_root_.types.Test.C#MethodType.m6(T).[T] => typeparam T
_root_.types.Test.C#MethodType.x1(). => def x1: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.x2(). => def x2: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType# => case class RepeatedType
_root_.types.Test.C#RepeatedType#(s) => val param s: String*
  [0..6): String => _root_.scala.Predef.String#
_root_.types.Test.C#RepeatedType#`<init>`(String*). => primaryctor <init>: (s: String*): C.this.RepeatedType
  [4..10): String => _root_.scala.Predef.String#
  [14..15): C => _root_.types.Test.C#
  [21..33): RepeatedType => _root_.types.Test.C#RepeatedType#
_root_.types.Test.C#RepeatedType#m1(Int*). => def m1: (x: Int*): Int
  [4..7): Int => _root_.scala.Int#
  [11..14): Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType#m1(Int*).(x) => param x: Int*
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#TypeType. => final object TypeType
_root_.types.Test.C#TypeType.T1# => abstract type T1
_root_.types.Test.C#TypeType.T4# => type T4: C
  [0..1): C => _root_.types.Test.C#
_root_.types.Test.C#TypeType.T5# => type T5: [U] => U
  [7..8): U => _root_.types.Test.C#TypeType.T5#[U]
_root_.types.Test.C#TypeType.T5#[U] => typeparam U
_root_.types.Test.C#TypeType.m2(). => def m2: [T2] => Nothing
  [8..15): Nothing => _root_.scala.Nothing#
_root_.types.Test.C#TypeType.m2().[T2] => typeparam T2
_root_.types.Test.C#TypeType.m3(). => def m3: [M3] => Nothing
  [8..15): Nothing => _root_.scala.Nothing#
_root_.types.Test.C#TypeType.m3().[M3] => typeparam M3
_root_.types.Test.C#`<init>`(). => primaryctor <init>: (): C
  [4..5): C => _root_.types.Test.C#
_root_.types.Test.C#annType1. => val annType1: T
  [0..1): T => _root_.types.T#
_root_.types.Test.C#annType2. => val annType2: T
  [0..1): T => _root_.types.T#
_root_.types.Test.C#compoundType1. => val compoundType1: AnyRef{def k: Int}
  [0..6): AnyRef => _root_.scala.AnyRef#
  [11..12): k => _root_.types.Test.C#$anon#k().
_root_.types.Test.C#compoundType2. => val compoundType2: M with N{}
  [0..1): M => _root_.types.Test.M#
  [7..8): N => _root_.types.Test.N#
_root_.types.Test.C#compoundType3. => val compoundType3: M with N{def k: Int}
  [0..1): M => _root_.types.Test.M#
  [7..8): N => _root_.types.Test.N#
  [13..14): k => _root_.types.Test.C#$anon#k().
_root_.types.Test.C#existentialType1. => val existentialType1: T forSome { type T }
_root_.types.Test.C#existentialType1.T# => abstract type T
_root_.types.Test.C#p. => val p: P
  [0..1): P => _root_.types.P#
_root_.types.Test.C#singleType1. => val singleType1: x.type
  [0..1): x => _root_.types.Test.C#x.
_root_.types.Test.C#singleType2. => val singleType2: x.type
  [0..1): x => _root_.types.P#x.
_root_.types.Test.C#superType1. => val superType1: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#superType2. => val superType2: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#superType3. => val superType3: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.C#thisType1. => val thisType1: C.this.type
  [0..1): C => _root_.types.Test.C#
_root_.types.Test.C#thisType2. => val thisType2: C.this.type
  [0..1): C => _root_.types.Test.C#
_root_.types.Test.C#typeLambda1(). => def typeLambda1: [M] => Nothing
  [7..14): Nothing => _root_.scala.Nothing#
_root_.types.Test.C#typeLambda1().[M] => typeparam M
_root_.types.Test.C#typeRef1. => val typeRef1: C
  [0..1): C => _root_.types.Test.C#
_root_.types.Test.C#typeRef2. => val typeRef2: p.C
  [0..1): p => _root_.types.Test.C#p.
  [2..3): C => _root_.types.P#C#
_root_.types.Test.C#typeRef3. => val typeRef3: C
  [0..1): C => _root_.types.T#C#
_root_.types.Test.C#typeRef4. => val typeRef4: List[Int]
  [0..4): List => _root_.scala.package.List#
  [5..8): Int => _root_.scala.Int#
_root_.types.Test.C#x. => val x: p.X
  [0..1): p => _root_.types.Test.C#p.
  [2..3): X => _root_.types.P#X#
_root_.types.Test.Literal. => final object Literal
_root_.types.Test.Literal.bool. => final val bool: Boolean
  [0..7): Boolean => _root_.scala.Boolean#
_root_.types.Test.Literal.char. => final val char: Char
  [0..4): Char => _root_.scala.Char#
_root_.types.Test.Literal.clazzOf. => final val clazzOf: Class[Option[Int]]
  [0..5): Class => _root_.java.lang.Class#
  [6..12): Option => _root_.scala.Option#
  [13..16): Int => _root_.scala.Int#
_root_.types.Test.Literal.double. => final val double: Double
  [0..6): Double => _root_.scala.Double#
_root_.types.Test.Literal.float. => final val float: Float
  [0..5): Float => _root_.scala.Float#
_root_.types.Test.Literal.int. => final val int: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.Literal.javaEnum. => final val javaEnum: LinkOption
  [0..10): LinkOption => _root_.java.nio.file.LinkOption#
_root_.types.Test.Literal.long. => final val long: Long
  [0..4): Long => _root_.scala.Long#
_root_.types.Test.Literal.nil. => final val nil: Null
  [0..4): Null => _root_.scala.Null#
_root_.types.Test.Literal.string. => final val string: String
  [0..6): String => _root_.java.lang.String#
_root_.types.Test.Literal.unit. => final val unit: Unit
  [0..4): Unit => _root_.scala.Unit#
_root_.types.Test.M# => class M.{+1 members}
_root_.types.Test.M#`<init>`(). => primaryctor <init>: (): M
  [4..5): M => _root_.types.Test.M#
_root_.types.Test.M#m(). => def m: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.Test.N# => class N
_root_.types.Test.N#`<init>`(). => primaryctor <init>: (): N
  [4..5): N => _root_.types.Test.N#
_root_.types.Test.N#n(). => def n: Int
  [0..3): Int => _root_.scala.Int#
_root_.types.ann# => class ann
_root_.types.ann#(x) => private param x: T
  [0..1): T => _root_.types.ann#[T]
_root_.types.ann#[T] => typeparam T
_root_.types.ann#`<init>`(T). => primaryctor <init>: (x: T): ann[T]
  [4..5): T => _root_.types.ann#[T]
  [8..11): ann => _root_.types.ann#
  [12..13): T => _root_.types.ann#[T]
_root_.types.ann1# => class ann1
_root_.types.ann1#`<init>`(). => primaryctor <init>: (): ann1
  [4..8): ann1 => _root_.types.ann1#
_root_.types.ann2# => class ann2
_root_.types.ann2#`<init>`(). => primaryctor <init>: (): ann2
  [4..8): ann2 => _root_.types.ann2#


semanticdb/integration/src/main/scala/example/local-file.scala
--------------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[23..35): `local-file` <= _root_.example.`local-file`#
[36..36):  <= _root_.example.`local-file`#`<init>`().
[40..47): locally => _root_.scala.Predef.locally(T).
[58..63): local <= local0_semanticdb_integration_src_main_scala_example_local_file_scala
[73..78): local => local0_semanticdb_integration_src_main_scala_example_local_file_scala
[79..80): + => _root_.scala.Int#`+`(Int).

Symbols:
_root_.example. => package example.{+7 members}
_root_.example.`local-file`# => class local-file
_root_.example.`local-file`#`<init>`(). => primaryctor <init>: (): `local-file`
  [4..16): `local-file` => _root_.example.`local-file`#
_root_.scala.Int#`+`(Int). => abstract def +: (x: Int): Int
  [4..7): Int => _root_.scala.Int#
  [10..13): Int => _root_.scala.Int#
_root_.scala.Predef.locally(T). => def locally: [T] => (x: T): T
  [11..12): T => _root_.scala.Predef.locally(T).[T]
  [15..16): T => _root_.scala.Predef.locally(T).[T]
local0_semanticdb_integration_src_main_scala_example_local_file_scala => val local: Int
  [0..3): Int => _root_.scala.Int#

Synthetics:
[47..47): *[Int]
  [0..1): * => _star_.
  [2..5): Int => _root_.scala.Int#
