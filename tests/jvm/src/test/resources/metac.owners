_empty_.Empty# => _empty_.
_empty_.Empty#`<init>`()V. => _empty_.Empty#
_root_.example. => _root_.
_root_.example.A# => _root_.example.
_root_.example.A#foo()I. => _root_.example.A#
_root_.example.B# => _root_.example.
_root_.example.B#`<init>`()V. => _root_.example.B#
_root_.example.B#foo()I. => _root_.example.B#
_root_.example.Example. => _root_.example.
_root_.example.Example.main([Ljava/lang/String;)V. => _root_.example.Example.
_root_.example.Example.main([Ljava/lang/String;)V.(args) => _root_.example.Example.main([Ljava/lang/String;)V.
_root_.example.Example.x. => _root_.example.Example.
_root_.example.Synthetic# => _root_.example.
_root_.example.Synthetic#`<init>`()V. => _root_.example.Synthetic#
_root_.example.`local-file`# => _root_.example.
_root_.example.`local-file`#`<init>`()V. => _root_.example.`local-file`#
_root_.flags. => _root_.
_root_.flags.p.package. => _root_.flags.p.
_root_.flags.p.package.AA# => _root_.flags.p.package.
_root_.flags.p.package.AA#(x) => _root_.flags.p.package.AA#
_root_.flags.p.package.AA#(y) => _root_.flags.p.package.AA#
_root_.flags.p.package.AA#(z) => _root_.flags.p.package.AA#
_root_.flags.p.package.AA#`<init>`(III)V. => _root_.flags.p.package.AA#
_root_.flags.p.package.C# => _root_.flags.p.package.
_root_.flags.p.package.C#(x) => _root_.flags.p.package.C#
_root_.flags.p.package.C#(y) => _root_.flags.p.package.C#
_root_.flags.p.package.C#(z) => _root_.flags.p.package.C#
_root_.flags.p.package.C#[T] => _root_.flags.p.package.C#
_root_.flags.p.package.C#[U] => _root_.flags.p.package.C#
_root_.flags.p.package.C#[V] => _root_.flags.p.package.C#
_root_.flags.p.package.C#`<init>`()V. => _root_.flags.p.package.C#
_root_.flags.p.package.C#`<init>`(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V. => _root_.flags.p.package.C#
_root_.flags.p.package.C#w()I. => _root_.flags.p.package.C#
_root_.flags.p.package.S# => _root_.flags.p.package.
_root_.flags.p.package.S#[T] => _root_.flags.p.package.S#
_root_.flags.p.package.S#`<init>`()V. => _root_.flags.p.package.S#
_root_.flags.p.package.T# => _root_.flags.p.package.
_root_.flags.p.package.U# => _root_.flags.p.package.
_root_.flags.p.package.V# => _root_.flags.p.package.
_root_.flags.p.package.X. => _root_.flags.p.package.
_root_.flags.p.package.Y# => _root_.flags.p.package.
_root_.flags.p.package.Y#`<init>`()V. => _root_.flags.p.package.Y#
_root_.flags.p.package.Z# => _root_.flags.p.package.
_root_.flags.p.package.m()Lscala/Nothing;. => _root_.flags.p.package.
_root_.flags.p.package.m()Lscala/Nothing;.[TT] => _root_.flags.p.package.m()Lscala/Nothing;.
_root_.flags.p.package.x. => _root_.flags.p.package.
_root_.flags.p.package.y. => _root_.flags.p.package.
_root_.flags.p.package.z(I)I. => _root_.flags.p.package.
_root_.flags.p.package.z(I)I.(pp) => _root_.flags.p.package.z(I)I.
_root_.java. => _root_.
_root_.java.lang.Object#`<init>`()V. => _root_.java.lang.Object#
_root_.java.nio. => _root_.java.
_root_.java.nio.file. => _root_.java.nio.
_root_.java.nio.file.LinkOption. => _root_.java.nio.file.
_root_.java.nio.file.LinkOption.NOFOLLOW_LINKS. => _root_.java.nio.file.LinkOption.
_root_.scala. => _root_.
_root_.scala.Array# => _root_.scala.
_root_.scala.Array. => _root_.scala.
_root_.scala.Array.empty(Lscala/reflect/ClassTag;)Ljava/lang/Object;. => _root_.scala.Array.
_root_.scala.Int# => _root_.scala.
_root_.scala.Int#`+`(I)I. => _root_.scala.Int#
_root_.scala.Option# => _root_.scala.
_root_.scala.Predef.String# => _root_.scala.Predef.
_root_.scala.Predef.`???`()Lscala/Nothing;. => _root_.scala.Predef.
_root_.scala.Predef.classOf()Ljava/lang/Class;. => _root_.scala.Predef.
_root_.scala.Predef.locally(Ljava/lang/Object;)Ljava/lang/Object;. => _root_.scala.Predef.
_root_.scala.Predef.println(Ljava/lang/Object;)V. => _root_.scala.Predef.
_root_.scala.Unit# => _root_.scala.
_root_.scala.annotation. => _root_.scala.
_root_.scala.annotation.StaticAnnotation# => _root_.scala.annotation.
_root_.scala.collection. => _root_.scala.
_root_.scala.collection.SeqLike#length()I. => _root_.scala.collection.SeqLike#
_root_.scala.collection.TraversableLike#headOption()Lscala/Option;. => _root_.scala.collection.TraversableLike#
_root_.scala.collection.immutable.List#map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;. => _root_.scala.collection.immutable.List#
_root_.scala.collection.immutable.List. => _root_.scala.collection.immutable.
_root_.scala.collection.immutable.StringLike#stripPrefix(Ljava/lang/String;)Ljava/lang/String;. => _root_.scala.collection.immutable.StringLike#
_root_.scala.collection.mutable. => _root_.scala.collection.
_root_.scala.collection.mutable.Stack# => _root_.scala.collection.mutable.
_root_.scala.collection.mutable.Stack#`<init>`()V. => _root_.scala.collection.mutable.Stack#
_root_.scala.concurrent. => _root_.scala.
_root_.scala.language. => _root_.scala.
_root_.scala.language.existentials. => _root_.scala.language.
_root_.scala.language.experimental. => _root_.scala.language.
_root_.scala.language.experimental.macros. => _root_.scala.language.experimental.
_root_.scala.language.higherKinds. => _root_.scala.language.
_root_.scala.package.List# => _root_.scala.package.
_root_.scala.reflect. => _root_.scala.
_root_.scala.reflect.package.classTag(Lscala/reflect/ClassTag;)Lscala/reflect/ClassTag;. => _root_.scala.reflect.package.
_root_.scala.specialized# => _root_.scala.
_root_.scala.specialized#`<init>`()V. => _root_.scala.specialized#
_root_.types. => _root_.
_root_.types.B# => _root_.types.
_root_.types.B#`<init>`()V. => _root_.types.B#
_root_.types.C# => _root_.types.
_root_.types.C#`<init>`()V. => _root_.types.C#
_root_.types.P# => _root_.types.
_root_.types.P#C# => _root_.types.P#
_root_.types.P#C#`<init>`()V. => _root_.types.P#C#
_root_.types.P#X# => _root_.types.P#
_root_.types.P#X#`<init>`()V. => _root_.types.P#X#
_root_.types.P#`<init>`()V. => _root_.types.P#
_root_.types.P#x. => _root_.types.P#
_root_.types.T# => _root_.types.
_root_.types.T#C# => _root_.types.T#
_root_.types.T#C#`<init>`()V. => _root_.types.T#C#
_root_.types.T#X# => _root_.types.T#
_root_.types.T#X#`<init>`()V. => _root_.types.T#X#
_root_.types.T#`<init>`()V. => _root_.types.T#
_root_.types.T#x. => _root_.types.T#
_root_.types.Test. => _root_.types.
_root_.types.Test.C# => _root_.types.Test.
_root_.types.Test.C#$anon#L# => _root_.types.Test.C#$anon#
_root_.types.Test.C#$anon#L#[T] => _root_.types.Test.C#$anon#L#
_root_.types.Test.C#$anon#k()I. => _root_.types.Test.C#$anon#
_root_.types.Test.C#ByNameType. => _root_.types.Test.C#
_root_.types.Test.C#ByNameType.m1(Lscala/Function0;)I. => _root_.types.Test.C#ByNameType.
_root_.types.Test.C#ByNameType.m1(Lscala/Function0;)I.(x) => _root_.types.Test.C#ByNameType.m1(Lscala/Function0;)I.
_root_.types.Test.C#ClassInfoType1. => _root_.types.Test.C#
_root_.types.Test.C#ClassInfoType2# => _root_.types.Test.C#
_root_.types.Test.C#ClassInfoType2#`<init>`()V. => _root_.types.Test.C#ClassInfoType2#
_root_.types.Test.C#ClassInfoType2#x()I. => _root_.types.Test.C#ClassInfoType2#
_root_.types.Test.C#ClassInfoType3# => _root_.types.Test.C#
_root_.types.Test.C#ClassInfoType3#[T] => _root_.types.Test.C#ClassInfoType3#
_root_.types.Test.C#MethodType. => _root_.types.Test.C#
_root_.types.Test.C#MethodType.m3()I. => _root_.types.Test.C#MethodType.
_root_.types.Test.C#MethodType.m4()I. => _root_.types.Test.C#MethodType.
_root_.types.Test.C#MethodType.m5(I)I. => _root_.types.Test.C#MethodType.
_root_.types.Test.C#MethodType.m5(I)I.(x) => _root_.types.Test.C#MethodType.m5(I)I.
_root_.types.Test.C#MethodType.m6(Ljava/lang/Object;)Ljava/lang/Object;. => _root_.types.Test.C#MethodType.
_root_.types.Test.C#MethodType.m6(Ljava/lang/Object;)Ljava/lang/Object;.(x) => _root_.types.Test.C#MethodType.m6(Ljava/lang/Object;)Ljava/lang/Object;.
_root_.types.Test.C#MethodType.m6(Ljava/lang/Object;)Ljava/lang/Object;.[T] => _root_.types.Test.C#MethodType.m6(Ljava/lang/Object;)Ljava/lang/Object;.
_root_.types.Test.C#MethodType.x1()I. => _root_.types.Test.C#MethodType.
_root_.types.Test.C#MethodType.x2()I. => _root_.types.Test.C#MethodType.
_root_.types.Test.C#RepeatedType# => _root_.types.Test.C#
_root_.types.Test.C#RepeatedType#(s) => _root_.types.Test.C#RepeatedType#
_root_.types.Test.C#RepeatedType#`<init>`(Lscala/collection/Seq;)V. => _root_.types.Test.C#RepeatedType#
_root_.types.Test.C#RepeatedType#m1(Lscala/collection/Seq;)I. => _root_.types.Test.C#RepeatedType#
_root_.types.Test.C#RepeatedType#m1(Lscala/collection/Seq;)I.(x) => _root_.types.Test.C#RepeatedType#m1(Lscala/collection/Seq;)I.
_root_.types.Test.C#TypeType. => _root_.types.Test.C#
_root_.types.Test.C#TypeType.T1# => _root_.types.Test.C#TypeType.
_root_.types.Test.C#TypeType.T4# => _root_.types.Test.C#TypeType.
_root_.types.Test.C#TypeType.T5# => _root_.types.Test.C#TypeType.
_root_.types.Test.C#TypeType.T5#[U] => _root_.types.Test.C#TypeType.T5#
_root_.types.Test.C#TypeType.m2()Lscala/Nothing;. => _root_.types.Test.C#TypeType.
_root_.types.Test.C#TypeType.m2()Lscala/Nothing;.[T2] => _root_.types.Test.C#TypeType.m2()Lscala/Nothing;.
_root_.types.Test.C#TypeType.m3()Lscala/Nothing;. => _root_.types.Test.C#TypeType.
_root_.types.Test.C#TypeType.m3()Lscala/Nothing;.[M3] => _root_.types.Test.C#TypeType.m3()Lscala/Nothing;.
_root_.types.Test.C#`<init>`()V. => _root_.types.Test.C#
_root_.types.Test.C#annType1. => _root_.types.Test.C#
_root_.types.Test.C#annType2. => _root_.types.Test.C#
_root_.types.Test.C#compoundType1. => _root_.types.Test.C#
_root_.types.Test.C#compoundType2. => _root_.types.Test.C#
_root_.types.Test.C#compoundType3. => _root_.types.Test.C#
_root_.types.Test.C#existentialType1. => _root_.types.Test.C#
_root_.types.Test.C#existentialType1.T# => _root_.types.Test.C#existentialType1.
_root_.types.Test.C#p. => _root_.types.Test.C#
_root_.types.Test.C#singleType1. => _root_.types.Test.C#
_root_.types.Test.C#singleType2. => _root_.types.Test.C#
_root_.types.Test.C#superType1. => _root_.types.Test.C#
_root_.types.Test.C#superType2. => _root_.types.Test.C#
_root_.types.Test.C#superType3. => _root_.types.Test.C#
_root_.types.Test.C#thisType1. => _root_.types.Test.C#
_root_.types.Test.C#thisType2. => _root_.types.Test.C#
_root_.types.Test.C#typeLambda1()Lscala/Nothing;. => _root_.types.Test.C#
_root_.types.Test.C#typeLambda1()Lscala/Nothing;.[M] => _root_.types.Test.C#typeLambda1()Lscala/Nothing;.
_root_.types.Test.C#typeRef1. => _root_.types.Test.C#
_root_.types.Test.C#typeRef2. => _root_.types.Test.C#
_root_.types.Test.C#typeRef3. => _root_.types.Test.C#
_root_.types.Test.C#typeRef4. => _root_.types.Test.C#
_root_.types.Test.C#x. => _root_.types.Test.C#
_root_.types.Test.Literal. => _root_.types.Test.
_root_.types.Test.Literal.bool. => _root_.types.Test.Literal.
_root_.types.Test.Literal.char. => _root_.types.Test.Literal.
_root_.types.Test.Literal.clazzOf. => _root_.types.Test.Literal.
_root_.types.Test.Literal.double. => _root_.types.Test.Literal.
_root_.types.Test.Literal.float. => _root_.types.Test.Literal.
_root_.types.Test.Literal.int. => _root_.types.Test.Literal.
_root_.types.Test.Literal.javaEnum. => _root_.types.Test.Literal.
_root_.types.Test.Literal.long. => _root_.types.Test.Literal.
_root_.types.Test.Literal.nil. => _root_.types.Test.Literal.
_root_.types.Test.Literal.string. => _root_.types.Test.Literal.
_root_.types.Test.Literal.unit. => _root_.types.Test.Literal.
_root_.types.Test.M# => _root_.types.Test.
_root_.types.Test.M#`<init>`()V. => _root_.types.Test.M#
_root_.types.Test.M#m()I. => _root_.types.Test.M#
_root_.types.Test.N# => _root_.types.Test.
_root_.types.Test.N#`<init>`()V. => _root_.types.Test.N#
_root_.types.Test.N#n()I. => _root_.types.Test.N#
_root_.types.ann# => _root_.types.
_root_.types.ann#(x) => _root_.types.ann#
_root_.types.ann#[T] => _root_.types.ann#
_root_.types.ann#`<init>`(Ljava/lang/Object;)V. => _root_.types.ann#
_root_.types.ann1# => _root_.types.
_root_.types.ann1#`<init>`()V. => _root_.types.ann1#
_root_.types.ann2# => _root_.types.
_root_.types.ann2#`<init>`()V. => _root_.types.ann2#
local0_semanticdb/integration/src/main/scala/example/local-file.scala => <none>