symbol: _root_.types.Test.Literal.
--- metac
+++ metacp
 properties: 8
 name: "Literal"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.types.Test.Literal."
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
+    declarations: "_root_.types.Test.Literal.`<init>`()."
+    declarations: "_root_.types.Test.Literal.int()."
+    declarations: "_root_.types.Test.Literal.int."
+    declarations: "_root_.types.Test.Literal.long()."
+    declarations: "_root_.types.Test.Literal.long."
+    declarations: "_root_.types.Test.Literal.float()."
+    declarations: "_root_.types.Test.Literal.float."
+    declarations: "_root_.types.Test.Literal.double()."
+    declarations: "_root_.types.Test.Literal.double."
+    declarations: "_root_.types.Test.Literal.nil()."
+    declarations: "_root_.types.Test.Literal.nil."
+    declarations: "_root_.types.Test.Literal.char()."
+    declarations: "_root_.types.Test.Literal.char."
+    declarations: "_root_.types.Test.Literal.string()."
+    declarations: "_root_.types.Test.Literal.string."
+    declarations: "_root_.types.Test.Literal.bool()."
+    declarations: "_root_.types.Test.Literal.bool."
+    declarations: "_root_.types.Test.Literal.unit()."
+    declarations: "_root_.types.Test.Literal.unit."
+    declarations: "_root_.types.Test.Literal.javaEnum(<?>)."
+    declarations: "_root_.types.Test.Literal.javaEnum."
+    declarations: "_root_.types.Test.Literal.clazzOf()."
+    declarations: "_root_.types.Test.Literal.clazzOf."
 accessibility {

symbol: _root_.types.Test.C#ByNameType.
--- metac
+++ metacp
 properties: 8
 name: "ByNameType"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    prefix {
-      tag: SINGLETON_TYPE
-      singletonType {
-        tag: THIS
-        symbol: "_root_.types.Test.C#"
-        primitive: 0
-        string: ""
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
-    symbol: "_root_.types.Test.C#ByNameType."
+    declarations: "_root_.types.Test.C#ByNameType.`<init>`()."
+    declarations: "_root_.types.Test.C#ByNameType.m1(=>Int)."
 accessibility {

symbol: _root_.types.
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "types"
-tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.types."
-}
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 owner: "_root_."

symbol: _root_.types.Test.C#typeRef2.
--- metac
+++ metacp
         string: ""
-    symbol: "_root_.types.P#C#"
+    symbol: "_root_.types.P.C#"
 accessibility {

symbol: _root_.example.Acc#
--- metac
+++ metacp
     declarations: "_root_.example.Acc#`<init>`()."
     declarations: "_root_.example.Acc#m1()."
     declarations: "_root_.example.Acc#m2()."
-    declarations: "_root_.example.Acc#m3()."
     declarations: "_root_.example.Acc#m4()."
     declarations: "_root_.example.Acc#m5()."
     declarations: "_root_.example.Acc#m6()."
     declarations: "_root_.example.Acc#m7()."
+    declarations: "_root_.example.Acc#m3()."
 accessibility {

symbol: _root_.types.ann#
--- metac
+++ metacp
     declarations: "_root_.types.ann#x."
+    declarations: "_root_.types.ann#[T]"
     declarations: "_root_.types.ann#`<init>`(T)."

symbol: _root_.types.Test.C#annType2().
--- metac
+++ metacp
             symbol: "_root_.types.T#"
-        annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "_root_.types.ann1#"
-        annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "_root_.types.ann2#"

symbol: _root_.flags.p.package.x().
--- metac
+++ metacp
 symbol: "_root_.flags.p.package.x()."
-kind: VAL
+kind: GETTER
 properties: 64
 name: "x"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.scala.Int#"
+  tag: METHOD_TYPE
+  methodType {
+    return_type {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.Int#"
 accessibility {

symbol: _root_.flags.p.package.C#
--- metac
+++ metacp
     declarations: "_root_.flags.p.package.C#x."
+    declarations: "_root_.flags.p.package.C#[T]"
     declarations: "_root_.flags.p.package.C#y."
+    declarations: "_root_.flags.p.package.C#[U]"
     declarations: "_root_.flags.p.package.C#z."
+    declarations: "_root_.flags.p.package.C#[V]"
     declarations: "_root_.flags.p.package.C#`<init>`(T,U,V)."
     declarations: "_root_.flags.p.package.C#`<init>`()."
     declarations: "_root_.flags.p.package.C#w()."

symbol: _root_.types.Test.
--- metac
+++ metacp
 properties: 8
 name: "Test"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.types.Test."
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
+    declarations: "_root_.types.Test.`<init>`()."
+    declarations: "_root_.types.Test.M#"
+    declarations: "_root_.types.Test.N#"
+    declarations: "_root_.types.Test.C#"
+    declarations: "_root_.types.Test.Literal."
+    declarations: "_root_.types.Test.Literal."
 accessibility {

symbol: _root_.types.Test.C#annType1().
--- metac
+++ metacp
             symbol: "_root_.types.T#"
-        annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "_root_.types.ann#"
-              type_arguments {
-                tag: TYPE_REF
-                typeRef {
-                  symbol: "_root_.scala.Int#"

symbol: _root_.types.Test.C#annType2.
--- metac
+++ metacp
         symbol: "_root_.types.T#"
-    annotations {
-      tpe {
-        tag: TYPE_REF
-        typeRef {
-          symbol: "_root_.types.ann1#"
-    annotations {
-      tpe {
-        tag: TYPE_REF
-        typeRef {
-          symbol: "_root_.types.ann2#"
 accessibility {

symbol: _root_.types.Test.C#singleType2().
--- metac
+++ metacp
             string: ""
-        symbol: "_root_.types.P#x()."
+        symbol: "_root_.types.P.x#"
         primitive: 0
         string: ""

symbol: _root_.types.Test.C#typeRef3().
--- metac
+++ metacp
             symbol: "_root_.types.T#"
-        symbol: "_root_.types.T#C#"
+        symbol: "_root_.types.T.C#"

symbol: _root_.types.Test.C#typeRef2().
--- metac
+++ metacp
             string: ""
-        symbol: "_root_.types.P#C#"
+        symbol: "_root_.types.P.C#"

symbol: _root_.types.Test.C#compoundType1.
--- metac
+++ metacp
         symbol: "_root_.scala.AnyRef#"
-    declarations: "_root_.types.Test.C#$anon#k()."
+    declarations: "_root_.types.Test.C#`<refinement>`#k()."
 accessibility {

symbol: _root_.example.Methods#m12b({}).(x)
--- metac
+++ metacp
         symbol: "_root_.scala.AnyRef#"
-    declarations: "_root_.example.Methods#$anon#x()."
+    declarations: "_root_.example.Methods#`<refinement>`#x()."
 accessibility {

symbol: _root_.example.Methods#m13(Int).(x)
--- metac
+++ metacp
 properties: 0
 name: "x"
 tpe {
-  tag: ANNOTATED_TYPE
-  annotatedType {
-    tpe {
-      tag: TYPE_REF
-      typeRef {
-        symbol: "_root_.scala.Int#"
-    annotations {
-      tpe {
-        tag: TYPE_REF
-        typeRef {
-          symbol: "_root_.scala.unchecked#"
+  tag: TYPE_REF
+  typeRef {
+    symbol: "_root_.scala.Int#"
 accessibility {

symbol: _root_.types.Test.C#typeRef3.
--- metac
+++ metacp
         symbol: "_root_.types.T#"
-    symbol: "_root_.types.T#C#"
+    symbol: "_root_.types.T.C#"
 accessibility {

symbol: _root_.flags.p.package.S#
--- metac
+++ metacp
     declarations: "_root_.flags.p.package.S#`<init>`()."
+    declarations: "_root_.flags.p.package.S#[T]"
 accessibility {

symbol: _root_.types.Test.C#compoundType3().
--- metac
+++ metacp
             symbol: "_root_.types.Test.N#"
-        declarations: "_root_.types.Test.C#$anon#k()."
+        declarations: "_root_.types.Test.C#`<refinement>`#k()."

symbol: _root_.types.Test.C#annType1.
--- metac
+++ metacp
         symbol: "_root_.types.T#"
-    annotations {
-      tpe {
-        tag: TYPE_REF
-        typeRef {
-          symbol: "_root_.types.ann#"
-          type_arguments {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "_root_.scala.Int#"
 accessibility {

symbol: _root_.types.Test.C#ClassInfoType3#
--- metac
+++ metacp
         symbol: "_root_.scala.AnyRef#"
+    declarations: "_root_.types.Test.C#ClassInfoType3#[T]"
 accessibility {

symbol: _root_.types.Test.C#TypeType.
--- metac
+++ metacp
 properties: 8
 name: "TypeType"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    prefix {
-      tag: SINGLETON_TYPE
-      singletonType {
-        tag: THIS
-        symbol: "_root_.types.Test.C#"
-        primitive: 0
-        string: ""
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
-    symbol: "_root_.types.Test.C#TypeType."
+    declarations: "_root_.types.Test.C#TypeType.`<init>`()."
+    declarations: "_root_.types.Test.C#TypeType.T1#"
+    declarations: "_root_.types.Test.C#TypeType.m2()."
+    declarations: "_root_.types.Test.C#TypeType.m3()."
+    declarations: "_root_.types.Test.C#TypeType.T4#"
+    declarations: "_root_.types.Test.C#TypeType.T5#"
 accessibility {

symbol: _root_.types.Test.C#x.
--- metac
+++ metacp
         string: ""
-    symbol: "_root_.types.P#X#"
+    symbol: "_root_.types.P.X#"
 accessibility {

symbol: _root_.example.Methods#
--- metac
+++ metacp
     declarations: "_root_.example.Methods#`<init>`()."
+    declarations: "_root_.example.Methods#[T]"
     declarations: "_root_.example.Methods#List#"
     declarations: "_root_.example.Methods#AList#"
     declarations: "_root_.example.Methods#m1()."
@@ -33,7 +34,9 @@
     declarations: "_root_.example.Methods#m11(.type+1)."
     declarations: "_root_.example.Methods#m11(.type+2)."
     declarations: "_root_.example.Methods#m12a({})."
+    declarations: "_root_.example.Methods#`<refinement>`#"
     declarations: "_root_.example.Methods#m12b({})."
+    declarations: "_root_.example.Methods#`<refinement>`#"
     declarations: "_root_.example.Methods#m13(Int)."
     declarations: "_root_.example.Methods#m14(T)."
     declarations: "_root_.example.Methods#m15(=>Int)."

symbol: _root_.types.Test.C#ClassInfoType1.
--- metac
+++ metacp
 properties: 8
 name: "ClassInfoType1"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    prefix {
-      tag: SINGLETON_TYPE
-      singletonType {
-        tag: THIS
-        symbol: "_root_.types.Test.C#"
-        primitive: 0
-        string: ""
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
-    symbol: "_root_.types.Test.C#ClassInfoType1."
+    declarations: "_root_.types.Test.C#ClassInfoType1.`<init>`()."
 accessibility {

symbol: _root_.example.
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "example"
-tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.example."
-}
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 owner: "_root_."

symbol: _root_.types.Test.C#compoundType3.
--- metac
+++ metacp
         symbol: "_root_.types.Test.N#"
-    declarations: "_root_.types.Test.C#$anon#k()."
+    declarations: "_root_.types.Test.C#`<refinement>`#k()."
 accessibility {

symbol: _root_.flags.p.package.S#[T]
--- metac
+++ metacp
-annotations {
-  tpe {
-    tag: TYPE_REF
-    typeRef {
-      symbol: "_root_.scala.specialized#"
-}
 accessibility {
   tag: PUBLIC
   symbol: ""

symbol: _root_.example.Example.
--- metac
+++ metacp
 properties: 8
 name: "Example"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.example.Example."
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
+    declarations: "_root_.example.Example.`<init>`()."
+    declarations: "_root_.example.Example.main(Array)."
+    declarations: "_root_.example.Example.x()."
+    declarations: "_root_.example.Example.x."
 accessibility {

symbol: _root_.flags.
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "flags"
-tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.flags."
-}
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 owner: "_root_."

symbol: _root_.types.Test.C#MethodType.
--- metac
+++ metacp
 properties: 8
 name: "MethodType"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    prefix {
-      tag: SINGLETON_TYPE
-      singletonType {
-        tag: THIS
-        symbol: "_root_.types.Test.C#"
-        primitive: 0
-        string: ""
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
-    symbol: "_root_.types.Test.C#MethodType."
+    declarations: "_root_.types.Test.C#MethodType.`<init>`()."
+    declarations: "_root_.types.Test.C#MethodType.x1()."
+    declarations: "_root_.types.Test.C#MethodType.x2()."
+    declarations: "_root_.types.Test.C#MethodType.m3()."
+    declarations: "_root_.types.Test.C#MethodType.m4()."
+    declarations: "_root_.types.Test.C#MethodType.m5(Int)."
+    declarations: "_root_.types.Test.C#MethodType.m6(T)."
 accessibility {

symbol: _root_.flags.p.package.X.
--- metac
+++ metacp
 properties: 136
 name: "X"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.flags.p.package.X."
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.Product#"
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.Serializable#"
+    declarations: "_root_.flags.p.package.X.`<init>`()."
+    declarations: "_root_.flags.p.package.X.productPrefix()."
+    declarations: "_root_.flags.p.package.X.productArity()."
+    declarations: "_root_.flags.p.package.X.productElement(Int)."
+    declarations: "_root_.flags.p.package.X.productIterator()."
+    declarations: "_root_.flags.p.package.X.canEqual(Any)."
+    declarations: "_root_.flags.p.package.X.hashCode()."
+    declarations: "_root_.flags.p.package.X.toString()."
+    declarations: "_root_.flags.p.package.X.readResolve()."
 accessibility {

symbol: _root_.example.Methods#List#
--- metac
+++ metacp
     declarations: "_root_.example.Methods#List#`<init>`()."
+    declarations: "_root_.example.Methods#List#[T]"
 accessibility {

symbol: _root_.types.Test.C#
--- metac
+++ metacp
     declarations: "_root_.types.Test.C#superType3()."
     declarations: "_root_.types.Test.C#superType3."
     declarations: "_root_.types.Test.C#compoundType1()."
+    declarations: "_root_.types.Test.C#`<refinement>`#"
     declarations: "_root_.types.Test.C#compoundType1."
     declarations: "_root_.types.Test.C#compoundType2()."
+    declarations: "_root_.types.Test.C#`<refinement>`#"
     declarations: "_root_.types.Test.C#compoundType2."
     declarations: "_root_.types.Test.C#compoundType3()."
+    declarations: "_root_.types.Test.C#`<refinement>`#"
     declarations: "_root_.types.Test.C#compoundType3."
     declarations: "_root_.types.Test.C#annType1()."
     declarations: "_root_.types.Test.C#annType1."
@@ -52,13 +55,18 @@
     declarations: "_root_.types.Test.C#existentialType1."
     declarations: "_root_.types.Test.C#typeLambda1()."
     declarations: "_root_.types.Test.C#ClassInfoType1."
+    declarations: "_root_.types.Test.C#ClassInfoType1."
     declarations: "_root_.types.Test.C#ClassInfoType2#"
     declarations: "_root_.types.Test.C#ClassInfoType3#"
     declarations: "_root_.types.Test.C#MethodType."
+    declarations: "_root_.types.Test.C#MethodType."
     declarations: "_root_.types.Test.C#ByNameType."
+    declarations: "_root_.types.Test.C#ByNameType."
     declarations: "_root_.types.Test.C#RepeatedType#"
     declarations: "_root_.types.Test.C#RepeatedType."
+    declarations: "_root_.types.Test.C#RepeatedType."
     declarations: "_root_.types.Test.C#TypeType."
+    declarations: "_root_.types.Test.C#TypeType."
 accessibility {

symbol: _root_.types.Test.C#x().
--- metac
+++ metacp
             string: ""
-        symbol: "_root_.types.P#X#"
+        symbol: "_root_.types.P.X#"

symbol: _root_.types.Test.Literal.javaEnum.
--- metac
+++ metacp
 kind: VAL
 properties: 8
 name: "javaEnum"
-tpe {
-  tag: SINGLETON_TYPE
-  singletonType {
-    tag: SYMBOL
-    symbol: "_root_.java.nio.file.LinkOption.NOFOLLOW_LINKS."
-    primitive: 0
-    string: ""
-}
 accessibility {
   tag: PRIVATE_THIS
   symbol: ""

symbol: _root_.example.Vals#xzm().
--- metac
+++ metacp
 symbol: "_root_.example.Vals#xzm()."
-kind: VAL
+kind: GETTER
 properties: 64
 name: "xzm"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.scala.Int#"
+  tag: METHOD_TYPE
+  methodType {
+    return_type {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.Int#"
 accessibility {

symbol: _root_.types.Test.C#singleType2.
--- metac
+++ metacp
         string: ""
-    symbol: "_root_.types.P#x()."
+    symbol: "_root_.types.P.x#"
     primitive: 0
     string: ""

symbol: _root_.flags.p.package.
--- metac
+++ metacp
 symbol: "_root_.flags.p.package."
 kind: PACKAGE_OBJECT
-properties: 0
+properties: 8
 name: "package"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.flags.p.package."
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
+    declarations: "_root_.flags.p.package.`<init>`()."
+    declarations: "_root_.flags.p.package.x()."
+    declarations: "_root_.flags.p.package.y()."
+    declarations: "_root_.flags.p.package.`y_=`(Int)."
+    declarations: "_root_.flags.p.package.y."
+    declarations: "_root_.flags.p.package.z(Int)."
+    declarations: "_root_.flags.p.package.m()."
+    declarations: "_root_.flags.p.package.C#"
+    declarations: "_root_.flags.p.package.T1#"
+    declarations: "_root_.flags.p.package.T2#"
+    declarations: "_root_.flags.p.package.S#"
+    declarations: "_root_.flags.p.package.U#"
+    declarations: "_root_.flags.p.package.V#"
+    declarations: "_root_.flags.p.package.X."
+    declarations: "_root_.flags.p.package.X."
+    declarations: "_root_.flags.p.package.Y#"
+    declarations: "_root_.flags.p.package.Z#"
+    declarations: "_root_.flags.p.package.AA#"
+    declarations: "_root_.flags.p.package.xs1()."
+    declarations: "_root_.flags.p.package.xs1."
 accessibility {

symbol: _root_.types.Test.C#compoundType1().
--- metac
+++ metacp
             symbol: "_root_.scala.AnyRef#"
-        declarations: "_root_.types.Test.C#$anon#k()."
+        declarations: "_root_.types.Test.C#`<refinement>`#k()."

symbol: _root_.example.Vals#xzlm().
--- metac
+++ metacp
 symbol: "_root_.example.Vals#xzlm()."
-kind: VAL
+kind: GETTER
 properties: 64
 name: "xzlm"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.scala.Int#"
+  tag: METHOD_TYPE
+  methodType {
+    return_type {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.Int#"
 accessibility {

symbol: _root_.example.ValUsages.
--- metac
+++ metacp
 properties: 8
 name: "ValUsages"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "_root_.example.ValUsages."
+  tag: CLASS_INFO_TYPE
+  classInfoType {
+    parents {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "_root_.scala.AnyRef#"
+    declarations: "_root_.example.ValUsages.`<init>`()."
+    declarations: "_root_.example.ValUsages.v()."
+    declarations: "_root_.example.ValUsages.v."
 accessibility {

