A.class
-------

Summary:
Schema => SemanticDB v3
Uri => A.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_empty_. => package _empty_
_empty_.A# => class A.{+2 decls}
  extends AnyRef
_empty_.A#`<init>`(). => primaryctor <init>: (): A
  A => _empty_.A#
_empty_.A#b(). => def b: : B
  B => _empty_.B#

B.class
-------

Summary:
Schema => SemanticDB v3
Uri => B.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_empty_. => package _empty_
_empty_.B# => class B.{+2 decls}
  extends AnyRef
_empty_.B#`<init>`(). => primaryctor <init>: (): B
  B => _empty_.B#
_empty_.B#a(). => def a: : A
  A => _empty_.A#

com/javacp/Javacp.class
-----------------------

Summary:
Schema => SemanticDB v3
Uri => com/javacp/Javacp.class
Text => empty
Language => Java
Symbols => 26 entries

Symbols:
_root_. => package _root_
_root_.com. => package com
_root_.com.javacp. => package javacp
_root_.com.javacp.Javacp# => class Javacp[T <?>, U <?>].{+23 decls}
  extends ArrayList[T]
  extends Serializable
  extends Comparable[U]
_root_.com.javacp.Javacp#<init>(Integer). => def <init>: (arg0: Integer): Unit
  arg0 => _root_.com.javacp.Javacp#<init>(Integer).(arg0)
  Unit => _root_.scala.Unit#
_root_.com.javacp.Javacp#<init>(Integer).(arg0) => param arg0: Integer
  Integer => _root_.java.lang.Integer#
_root_.com.javacp.Javacp#[T] => typeparam T
_root_.com.javacp.Javacp#[U] => typeparam U
_root_.com.javacp.Javacp#compareTo(U). => def compareTo: (arg0: U): Int
  arg0 => _root_.com.javacp.Javacp#compareTo(U).(arg0)
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#compareTo(U).(arg0) => param arg0: U
  U => U
_root_.com.javacp.Javacp#isPackagePrivateField. => private[javacp] var isPackagePrivateField: Int
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#isPackagePrivateMethod(). => private[javacp] def isPackagePrivateMethod: (): Int
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#isPrivateField. => private var isPrivateField: Int
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#isPrivateMethod(). => private def isPrivateMethod: (): Int
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#isProtectedField. => protected var isProtectedField: Int
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#isProtectedMethod(). => protected def isProtectedMethod: (): Int
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#isPublicField. => var isPublicField: Int
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#isPublicMethod(). => def isPublicMethod: (): Int
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#isVal. => private[javacp] val isVal: Int
  Int => _root_.scala.Int#
_root_.com.javacp.Javacp#overload(File+1). => def overload: (arg0: File): Unit
  arg0 => _root_.com.javacp.Javacp#overload(File+1).(arg0)
  Unit => _root_.scala.Unit#
_root_.com.javacp.Javacp#overload(File+1).(arg0) => param arg0: File
  File => _root_.java.io.File#
_root_.com.javacp.Javacp#overload(File+2). => def overload: (arg0: File): Unit
  arg0 => _root_.com.javacp.Javacp#overload(File+2).(arg0)
  Unit => _root_.scala.Unit#
_root_.com.javacp.Javacp#overload(File+2).(arg0) => param arg0: File
  File => _root_.sourcecode.File#
_root_.com.javacp.Javacp#signature(HashMap,String). => def signature: (arg0: HashMap[ArrayList[HashMap[String, Array[Integer]]], Array[String]], arg1: Array[String]): HashSet[T]
  arg0 => _root_.com.javacp.Javacp#signature(HashMap,String).(arg0)
  arg1 => _root_.com.javacp.Javacp#signature(HashMap,String).(arg1)
  HashSet => _root_.java.util.HashSet#
  T => T
_root_.com.javacp.Javacp#signature(HashMap,String).(arg0) => param arg0: HashMap[ArrayList[HashMap[String, Array[Integer]]], Array[String]]
  HashMap => _root_.java.util.HashMap#
  ArrayList => _root_.java.util.ArrayList#
  String => _root_.java.lang.String#
  Array => _root_.scala.Array#
  Integer => _root_.java.lang.Integer#
_root_.com.javacp.Javacp#signature(HashMap,String).(arg1) => param arg1: Array[String]
  Array => _root_.scala.Array#
  String => _root_.java.lang.String#

example/A.class
---------------

Summary:
Schema => SemanticDB v3
Uri => example/A.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.A# => trait A.{+1 decls}
  extends AnyRef
_root_.example.A#foo(). => abstract def foo: : Int
  Int => _root_.scala.Int#

example/Acc.class
-----------------

Summary:
Schema => SemanticDB v3
Uri => example/Acc.class
Text => empty
Language => Scala
Symbols => 11 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.Acc# => class Acc.{+8 decls}
  extends AnyRef
_root_.example.Acc#`<init>`(). => primaryctor <init>: (): Acc
  Acc => _root_.example.Acc#
_root_.example.Acc#m1(). => private def m1: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m2(). => private[this] def m2: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m3(). => private[Acc] def m3: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m4(). => protected def m4: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m5(). => protected[this] def m5: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m6(). => protected[example] def m6: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m7(). => def m7: : Nothing
  Nothing => _root_.scala.Nothing#

example/B.class
---------------

Summary:
Schema => SemanticDB v3
Uri => example/B.class
Text => empty
Language => Scala
Symbols => 5 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.B# => class B.{+2 decls}
  extends AnyRef
  extends A
_root_.example.B#`<init>`(). => primaryctor <init>: (): B
  B => _root_.example.B#
_root_.example.B#foo(). => def foo: : Int
  Int => _root_.scala.Int#

example/Example.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => example/Example.class
Text => empty
Language => Scala
Symbols => 7 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.Example. => final object Example
_root_.example.Example.main(Array). => def main: (args: Array[String]): Unit
  args => _root_.example.Example.main(Array).(args)
  Unit => _root_.scala.Unit#
_root_.example.Example.main(Array).(args) => param args: Array[String]
  Array => _root_.scala.Array#
  String => _root_.scala.Predef.String#
_root_.example.Example.x(). => getter x: : ClassTag[Int]
  ClassTag => _root_.scala.reflect.ClassTag#
  Int => _root_.scala.Int#
_root_.example.Example.x. => private[this] val x: ClassTag[Int]
  ClassTag => _root_.scala.reflect.ClassTag#
  Int => _root_.scala.Int#

example/MethodUsages.class
--------------------------

Summary:
Schema => SemanticDB v3
Uri => example/MethodUsages.class
Text => empty
Language => Scala
Symbols => 6 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.MethodUsages# => class MethodUsages.{+3 decls}
  extends AnyRef
_root_.example.MethodUsages#`<init>`(). => primaryctor <init>: (): MethodUsages
  MethodUsages => _root_.example.MethodUsages#
_root_.example.MethodUsages#m(). => getter m: : Methods[Int]
  Methods => _root_.example.Methods#
  Int => _root_.scala.Int#
_root_.example.MethodUsages#m. => private[this] val m: Methods[Int]
  Methods => _root_.example.Methods#
  Int => _root_.scala.Int#

example/Methods.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => example/Methods.class
Text => empty
Language => Scala
Symbols => 63 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.Methods# => class Methods[T >: Nothing <: Any].{+29 decls}
  extends AnyRef
_root_.example.Methods#AList# => type AList: [T >: Nothing <: Any] => Methods.this.List[T]
  T => _root_.example.Methods#AList#[T]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
_root_.example.Methods#AList#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#List# => class List[T >: Nothing <: Any].{+2 decls}
  extends AnyRef
_root_.example.Methods#List#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#List#`<init>`(). => primaryctor <init>: (): Methods.this.List[T]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
  T => _root_.example.Methods#List#[T]
_root_.example.Methods#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#`<init>`(). => primaryctor <init>: (): Methods[T]
  Methods => _root_.example.Methods#
  T => _root_.example.Methods#[T]
_root_.example.Methods#`<refinement>`# => class <refinement>
_root_.example.Methods#`<refinement>`# => class <refinement>
_root_.example.Methods#`<refinement>`#x(). => abstract getter x: : Int
  Int => _root_.scala.Int#
_root_.example.Methods#`m8().`(). => def m8().: (): Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#`m9().`# => class m9()..{+1 decls}
  extends AnyRef
_root_.example.Methods#`m9().`#`<init>`(). => primaryctor <init>: (): Methods.this.m9().
  Methods => _root_.example.Methods#
  m9(). => _root_.example.Methods#`m9().`#
_root_.example.Methods#m1(). => def m1: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m10(AList). => def m10: (x: Methods.this.AList[T]): Nothing
  x => _root_.example.Methods#m10(AList).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m10(AList).(x) => param x: Methods.this.AList[T]
  Methods => _root_.example.Methods#
  AList => _root_.example.Methods#AList#
  T => _root_.example.Methods#[T]
_root_.example.Methods#m11(.type+1). => def m11: (x: Predef.type): Nothing
  x => _root_.example.Methods#m11(.type+1).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m11(.type+1).(x) => param x: Predef.type
  Predef => _root_.scala.Predef.
_root_.example.Methods#m11(.type+2). => def m11: (x: Example.type): Nothing
  x => _root_.example.Methods#m11(.type+2).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m11(.type+2).(x) => param x: Example.type
  Example => _root_.example.Example.
_root_.example.Methods#m12a({}). => def m12a: (x: AnyRef {  }): Nothing
  x => _root_.example.Methods#m12a({}).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m12a({}).(x) => param x: AnyRef {  }
  AnyRef => _root_.scala.AnyRef#
_root_.example.Methods#m12b({}). => def m12b: (x: AnyRef { getter x: Int }): Nothing
  x => _root_.example.Methods#m12b({}).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m12b({}).(x) => param x: AnyRef { getter x: Int }
  AnyRef => _root_.scala.AnyRef#
  x => _root_.example.Methods#`<refinement>`#x().
_root_.example.Methods#m13(Int). => def m13: (x: Int): Nothing
  x => _root_.example.Methods#m13(Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m13(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m14(T). => def m14: (x: T forSome { type T >: Nothing <: Any }): Nothing
  x => _root_.example.Methods#m14(T).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m14(T).(x) => param x: T forSome { type T >: Nothing <: Any }
  T => _root_.example.Methods#m14(T).(x)T#
_root_.example.Methods#m14(T).(x)T# => abstract type T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#m15(=>Int). => def m15: (x: => Int): Nothing
  x => _root_.example.Methods#m15(=>Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m15(=>Int).(x) => param x: => Int
  Int => _root_.scala.Int#
_root_.example.Methods#m16(Int*). => def m16: (x: Int*): Nothing
  x => _root_.example.Methods#m16(Int*).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m16(Int*).(x) => param x: Int*
  Int => _root_.scala.Int#
_root_.example.Methods#m2(). => def m2: (): Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m3(Int). => def m3: (x: Int): Nothing
  x => _root_.example.Methods#m3(Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m3(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m4(Int,Int). => def m4: (x: Int)(y: Int): Nothing
  x => _root_.example.Methods#m4(Int,Int).(x)
  y => _root_.example.Methods#m4(Int,Int).(y)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m4(Int,Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m4(Int,Int).(y) => param y: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m5(Int). => def m5: (x: Int): Nothing
  x => _root_.example.Methods#m5(Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m5(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m5(String). => def m5: (x: String): Nothing
  x => _root_.example.Methods#m5(String).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m5(String).(x) => param x: String
  String => _root_.scala.Predef.String#
_root_.example.Methods#m6(Int). => def m6: (x: Int): Nothing
  x => _root_.example.Methods#m6(Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m6(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m6(List+1). => def m6: (x: Methods.this.List[T]): Nothing
  x => _root_.example.Methods#m6(List+1).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m6(List+1).(x) => param x: Methods.this.List[T]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
  T => _root_.example.Methods#[T]
_root_.example.Methods#m6(List+2). => def m6: (x: List[T]): Nothing
  x => _root_.example.Methods#m6(List+2).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m6(List+2).(x) => param x: List[T]
  List => _root_.scala.package.List#
  T => _root_.example.Methods#[T]
_root_.example.Methods#m7a(Methods,List,Ordering). => def m7a: [U >: Nothing <: Any] => (c: Methods[T], l: Methods.this.List[U])(evidence$1: Ordering[U]): Nothing
  U => _root_.example.Methods#m7a(Methods,List,Ordering).[U]
  c => _root_.example.Methods#m7a(Methods,List,Ordering).(c)
  l => _root_.example.Methods#m7a(Methods,List,Ordering).(l)
  evidence$1 => _root_.example.Methods#m7a(Methods,List,Ordering).(evidence$1)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m7a(Methods,List,Ordering).(c) => param c: Methods[T]
  Methods => _root_.example.Methods#
  T => _root_.example.Methods#[T]
_root_.example.Methods#m7a(Methods,List,Ordering).(evidence$1) => implicit param evidence$1: Ordering[U]
  Ordering => _root_.scala.math.Ordering#
  U => _root_.example.Methods#m7a(Methods,List,Ordering).[U]
_root_.example.Methods#m7a(Methods,List,Ordering).(l) => param l: Methods.this.List[U]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
  U => _root_.example.Methods#m7a(Methods,List,Ordering).[U]
_root_.example.Methods#m7a(Methods,List,Ordering).[U] => typeparam U: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#m7b(List,Function1). => def m7b: [U >: Nothing <: Any] => (l: Methods.this.List[U])(evidence$2: Function1[U, T]): Nothing
  U => _root_.example.Methods#m7b(List,Function1).[U]
  l => _root_.example.Methods#m7b(List,Function1).(l)
  evidence$2 => _root_.example.Methods#m7b(List,Function1).(evidence$2)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m7b(List,Function1).(evidence$2) => implicit param evidence$2: Function1[U, T]
  Function1 => _root_.scala.Function1#
  U => _root_.example.Methods#m7b(List,Function1).[U]
  T => _root_.example.Methods#[T]
_root_.example.Methods#m7b(List,Function1).(l) => param l: Methods.this.List[U]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
  U => _root_.example.Methods#m7b(List,Function1).[U]
_root_.example.Methods#m7b(List,Function1).[U] => typeparam U: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#m9(`m9().`). => def m9: (x: Methods.this.m9().): Nothing
  x => _root_.example.Methods#m9(`m9().`).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m9(`m9().`).(x) => param x: Methods.this.m9().
  Methods => _root_.example.Methods#
  m9(). => _root_.example.Methods#`m9().`#

example/Synthetic.class
-----------------------

Summary:
Schema => SemanticDB v3
Uri => example/Synthetic.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.Synthetic# => class Synthetic.{+1 decls}
  extends AnyRef
_root_.example.Synthetic#`<init>`(). => primaryctor <init>: (): Synthetic
  Synthetic => _root_.example.Synthetic#

example/ValUsages.class
-----------------------

Summary:
Schema => SemanticDB v3
Uri => example/ValUsages.class
Text => empty
Language => Scala
Symbols => 5 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.ValUsages. => final object ValUsages
_root_.example.ValUsages.v(). => getter v: : Vals
  Vals => _root_.example.Vals#
_root_.example.ValUsages.v. => private[this] val v: Vals
  Vals => _root_.example.Vals#

example/Vals.class
------------------

Summary:
Schema => SemanticDB v3
Uri => example/Vals.class
Text => empty
Language => Scala
Symbols => 41 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.Vals# => abstract class Vals.{+30 decls}
  extends AnyRef
_root_.example.Vals#`<init>`(Int,Int,Int). => primaryctor <init>: (p: Int, xp: Int, yp: Int): Vals
  p => _root_.example.Vals#`<init>`(Int,Int,Int).(p)
  xp => _root_.example.Vals#`<init>`(Int,Int,Int).(xp)
  yp => _root_.example.Vals#`<init>`(Int,Int,Int).(yp)
  Vals => _root_.example.Vals#
_root_.example.Vals#`<init>`(Int,Int,Int).(p) => param p: Int
  Int => _root_.scala.Int#
_root_.example.Vals#`<init>`(Int,Int,Int).(xp) => valparam param xp: Int
  Int => _root_.scala.Int#
_root_.example.Vals#`<init>`(Int,Int,Int).(yp) => varparam param yp: Int
  Int => _root_.scala.Int#
_root_.example.Vals#`yam_=`(Int). => abstract setter yam_=: (x$1: Int): Unit
  x$1 => _root_.example.Vals#`yam_=`(Int).(x$1)
  Unit => _root_.scala.Unit#
_root_.example.Vals#`yam_=`(Int).(x$1) => param x$1: Int
  Int => _root_.scala.Int#
_root_.example.Vals#`yfm_=`(Int). => final setter yfm_=: (x$1: Int): Unit
  x$1 => _root_.example.Vals#`yfm_=`(Int).(x$1)
  Unit => _root_.scala.Unit#
_root_.example.Vals#`yfm_=`(Int).(x$1) => param x$1: Int
  Int => _root_.scala.Int#
_root_.example.Vals#`yim_=`(Int). => setter yim_=: (x$1: Int): Unit
  x$1 => _root_.example.Vals#`yim_=`(Int).(x$1)
  Unit => _root_.scala.Unit#
_root_.example.Vals#`yim_=`(Int).(x$1) => param x$1: Int
  Int => _root_.scala.Int#
_root_.example.Vals#`ym_=`(Int). => setter ym_=: (x$1: Int): Unit
  x$1 => _root_.example.Vals#`ym_=`(Int).(x$1)
  Unit => _root_.scala.Unit#
_root_.example.Vals#`ym_=`(Int).(x$1) => param x$1: Int
  Int => _root_.scala.Int#
_root_.example.Vals#`yp_=`(Int). => setter yp_=: (x$1: Int): Unit
  x$1 => _root_.example.Vals#`yp_=`(Int).(x$1)
  Unit => _root_.scala.Unit#
_root_.example.Vals#`yp_=`(Int).(x$1) => param x$1: Int
  Int => _root_.scala.Int#
_root_.example.Vals#m(). => def m: : Unit
  Unit => _root_.scala.Unit#
_root_.example.Vals#p. => private[this] val p: Int
  Int => _root_.scala.Int#
_root_.example.Vals#xam(). => abstract getter xam: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#xfm(). => final getter xfm: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#xfm. => private[this] final val xfm: Int
  Int => _root_.scala.Int#
_root_.example.Vals#xim(). => implicit getter xim: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#xim. => private[this] val xim: Int
  Int => _root_.scala.Int#
_root_.example.Vals#xlm. => private[this] val xlm: Int
  Int => _root_.scala.Int#
_root_.example.Vals#xm(). => getter xm: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#xm. => private[this] val xm: Int
  Int => _root_.scala.Int#
_root_.example.Vals#xp(). => getter xp: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#xp. => private[this] val xp: Int
  Int => _root_.scala.Int#
_root_.example.Vals#xzlm(). => private[this] lazy getter xzlm: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#xzm(). => lazy getter xzm: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#yam(). => abstract getter yam: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#yfm(). => final getter yfm: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#yfm. => private[this] final var yfm: Int
  Int => _root_.scala.Int#
_root_.example.Vals#yim(). => implicit getter yim: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#yim. => private[this] var yim: Int
  Int => _root_.scala.Int#
_root_.example.Vals#ylm. => private[this] var ylm: Int
  Int => _root_.scala.Int#
_root_.example.Vals#ym(). => getter ym: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#ym. => private[this] var ym: Int
  Int => _root_.scala.Int#
_root_.example.Vals#yp(). => getter yp: : Int
  Int => _root_.scala.Int#
_root_.example.Vals#yp. => private[this] var yp: Int
  Int => _root_.scala.Int#

example/local-file.class
------------------------

Summary:
Schema => SemanticDB v3
Uri => example/local-file.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_root_. => package _root_
_root_.example. => package example
_root_.example.`local-file`# => class local-file.{+1 decls}
  extends AnyRef
_root_.example.`local-file`#`<init>`(). => primaryctor <init>: (): local-file
  local-file => _root_.example.`local-file`#

exclude/Exclude.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => exclude/Exclude.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_root_. => package _root_
_root_.exclude. => package exclude
_root_.exclude.Exclude# => class Exclude.{+1 decls}
  extends AnyRef
_root_.exclude.Exclude#`<init>`(). => primaryctor <init>: (): Exclude
  Exclude => _root_.exclude.Exclude#

flags/p/package.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => flags/p/package.class
Text => empty
Language => Scala
Symbols => 60 entries

Symbols:
_root_. => package _root_
_root_.flags. => package flags
_root_.flags.p. => package p
_root_.flags.p.package. => final package object package
_root_.flags.p.package.AA# => class AA.{+7 decls}
  extends AnyRef
_root_.flags.p.package.AA#`<init>`(Int,Int,Int). => primaryctor <init>: (x: Int, y: Int, z: Int): AA
  x => _root_.flags.p.package.AA#`<init>`(Int,Int,Int).(x)
  y => _root_.flags.p.package.AA#`<init>`(Int,Int,Int).(y)
  z => _root_.flags.p.package.AA#`<init>`(Int,Int,Int).(z)
  AA => _root_.flags.p.package.AA#
_root_.flags.p.package.AA#`<init>`(Int,Int,Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#`<init>`(Int,Int,Int).(y) => valparam param y: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#`<init>`(Int,Int,Int).(z) => varparam param z: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#`z_=`(Int). => setter z_=: (x$1: Int): Unit
  x$1 => _root_.flags.p.package.AA#`z_=`(Int).(x$1)
  Unit => _root_.scala.Unit#
_root_.flags.p.package.AA#`z_=`(Int).(x$1) => param x$1: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#x. => private[this] val x: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#y(). => getter y: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#y. => private[this] val y: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#z(). => getter z: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#z. => private[this] var z: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.C# => abstract class C[+T >: Nothing <: Any, -U >: Nothing <: Any, V >: Nothing <: Any].{+9 decls}
  extends AnyRef
_root_.flags.p.package.C#[T] => covariant typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.C#[U] => contravariant typeparam U: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.C#[V] => typeparam V: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.C#`<init>`(). => secondaryctor <init>: (): C[T, U, V]
  C => _root_.flags.p.package.C#
  T => _root_.flags.p.package.C#[T]
  U => _root_.flags.p.package.C#[U]
  V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#`<init>`(T,U,V). => primaryctor <init>: (x: T, y: U, z: V): C[T, U, V]
  x => _root_.flags.p.package.C#`<init>`(T,U,V).(x)
  y => _root_.flags.p.package.C#`<init>`(T,U,V).(y)
  z => _root_.flags.p.package.C#`<init>`(T,U,V).(z)
  C => _root_.flags.p.package.C#
  T => _root_.flags.p.package.C#[T]
  U => _root_.flags.p.package.C#[U]
  V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#`<init>`(T,U,V).(x) => param x: T
  T => _root_.flags.p.package.C#[T]
_root_.flags.p.package.C#`<init>`(T,U,V).(y) => param y: U
  U => _root_.flags.p.package.C#[U]
_root_.flags.p.package.C#`<init>`(T,U,V).(z) => param z: V
  V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#w(). => abstract def w: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.C#x. => private[this] val x: T
  T => _root_.flags.p.package.C#[T]
_root_.flags.p.package.C#y. => private[this] val y: U
  U => _root_.flags.p.package.C#[U]
_root_.flags.p.package.C#z. => private[this] val z: V
  V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.S# => class S[T >: Nothing <: Any].{+2 decls}
  extends AnyRef
_root_.flags.p.package.S#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.S#`<init>`(). => primaryctor <init>: (): S[T]
  S => _root_.flags.p.package.S#
  T => _root_.flags.p.package.S#[T]
_root_.flags.p.package.T# => type T: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.U# => abstract type U: >: Nothing <: Int
  Nothing => _root_.scala.Nothing#
  Int => _root_.scala.Int#
_root_.flags.p.package.V# => abstract type V: >: Int <: Any
  Int => _root_.scala.Int#
  Any => _root_.scala.Any#
_root_.flags.p.package.X. => final case object X
_root_.flags.p.package.X.canEqual(Any). => def canEqual: (x$1: Any): Boolean
  x$1 => _root_.flags.p.package.X.canEqual(Any).(x$1)
  Boolean => _root_.scala.Boolean#
_root_.flags.p.package.X.canEqual(Any).(x$1) => param x$1: Any
  Any => _root_.scala.Any#
_root_.flags.p.package.X.hashCode(). => def hashCode: (): Int
  Int => _root_.scala.Int#
_root_.flags.p.package.X.productArity(). => def productArity: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.X.productElement(Int). => def productElement: (x$1: Int): Any
  x$1 => _root_.flags.p.package.X.productElement(Int).(x$1)
  Any => _root_.scala.Any#
_root_.flags.p.package.X.productElement(Int).(x$1) => param x$1: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.X.productIterator(). => def productIterator: : Iterator[Any]
  Iterator => _root_.scala.collection.Iterator#
  Any => _root_.scala.Any#
_root_.flags.p.package.X.productPrefix(). => def productPrefix: : String
  String => _root_.java.lang.String#
_root_.flags.p.package.X.readResolve(). => private def readResolve: (): Object
  Object => _root_.java.lang.Object#
_root_.flags.p.package.X.toString(). => def toString: (): String
  String => _root_.java.lang.String#
_root_.flags.p.package.Y# => final class Y.{+1 decls}
  extends AnyRef
_root_.flags.p.package.Y#`<init>`(). => primaryctor <init>: (): Y
  Y => _root_.flags.p.package.Y#
_root_.flags.p.package.Z# => sealed trait Z
  extends AnyRef
_root_.flags.p.package.`y_=`(Int). => protected setter y_=: (x$1: Int): Unit
  x$1 => _root_.flags.p.package.`y_=`(Int).(x$1)
  Unit => _root_.scala.Unit#
_root_.flags.p.package.`y_=`(Int).(x$1) => param x$1: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.m(). => macro m: [TT >: Nothing <: Any] => : Nothing
  TT => _root_.flags.p.package.m().[TT]
  Nothing => _root_.scala.Nothing#
_root_.flags.p.package.m().[TT] => typeparam TT: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.x(). => private lazy getter x: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.xs1(). => getter xs1: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.flags.p.package.xs1. => private[this] val xs1: Nothing
  Nothing => _root_.scala.Nothing#
_root_.flags.p.package.y(). => protected implicit getter y: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.y. => private[this] var y: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.z(Int). => def z: (pp: Int): Int
  pp => _root_.flags.p.package.z(Int).(pp)
  Int => _root_.scala.Int#
_root_.flags.p.package.z(Int).(pp) => param pp: Int
  Int => _root_.scala.Int#

types/B.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/B.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_root_. => package _root_
_root_.types. => package types
_root_.types.B# => class B.{+1 decls}
  extends AnyRef
_root_.types.B#`<init>`(). => primaryctor <init>: (): B
  B => _root_.types.B#

types/C.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/C.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_root_. => package _root_
_root_.types. => package types
_root_.types.C# => class C.{+1 decls}
  extends AnyRef
_root_.types.C#`<init>`(). => primaryctor <init>: (): C
  C => _root_.types.C#

types/P.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/P.class
Text => empty
Language => Scala
Symbols => 10 entries

Symbols:
_root_. => package _root_
_root_.types. => package types
_root_.types.P# => class P.{+5 decls}
  extends AnyRef
_root_.types.P#C# => class C.{+1 decls}
  extends AnyRef
_root_.types.P#C#`<init>`(). => primaryctor <init>: (): P.this.C
  P => _root_.types.P#
  C => _root_.types.P#C#
_root_.types.P#X# => class X.{+1 decls}
  extends AnyRef
_root_.types.P#X#`<init>`(). => primaryctor <init>: (): P.this.X
  P => _root_.types.P#
  X => _root_.types.P#X#
_root_.types.P#`<init>`(). => primaryctor <init>: (): P
  P => _root_.types.P#
_root_.types.P#x(). => getter x: : P.this.X
  P => _root_.types.P#
  X => _root_.types.P#X#
_root_.types.P#x. => private[this] val x: P.this.X
  P => _root_.types.P#
  X => _root_.types.P#X#

types/T.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/T.class
Text => empty
Language => Scala
Symbols => 10 entries

Symbols:
_root_. => package _root_
_root_.types. => package types
_root_.types.T# => class T.{+5 decls}
  extends AnyRef
_root_.types.T#C# => class C.{+1 decls}
  extends AnyRef
_root_.types.T#C#`<init>`(). => primaryctor <init>: (): T.this.C
  T => _root_.types.T#
  C => _root_.types.T#C#
_root_.types.T#X# => class X.{+1 decls}
  extends AnyRef
_root_.types.T#X#`<init>`(). => primaryctor <init>: (): T.this.X
  T => _root_.types.T#
  X => _root_.types.T#X#
_root_.types.T#`<init>`(). => primaryctor <init>: (): T
  T => _root_.types.T#
_root_.types.T#x(). => getter x: : T.this.X
  T => _root_.types.T#
  X => _root_.types.T#X#
_root_.types.T#x. => private[this] val x: T.this.X
  T => _root_.types.T#
  X => _root_.types.T#X#

types/Test.class
----------------

Summary:
Schema => SemanticDB v3
Uri => types/Test.class
Text => empty
Language => Scala
Symbols => 134 entries

Symbols:
_root_. => package _root_
_root_.types. => package types
_root_.types.Test. => final object Test
_root_.types.Test.C# => class C.{+56 decls}
  extends M
_root_.types.Test.C#ByNameType. => final object ByNameType
_root_.types.Test.C#ByNameType.m1(=>Int). => def m1: (x: => Int): Int
  x => _root_.types.Test.C#ByNameType.m1(=>Int).(x)
  Int => _root_.scala.Int#
_root_.types.Test.C#ByNameType.m1(=>Int).(x) => param x: => Int
  Int => _root_.scala.Int#
_root_.types.Test.C#ClassInfoType1. => final object ClassInfoType1
_root_.types.Test.C#ClassInfoType2# => class ClassInfoType2.{+2 decls}
  extends B
_root_.types.Test.C#ClassInfoType2#`<init>`(). => primaryctor <init>: (): C.this.ClassInfoType2
  C => _root_.types.Test.C#
  ClassInfoType2 => _root_.types.Test.C#ClassInfoType2#
_root_.types.Test.C#ClassInfoType2#x(). => def x: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#ClassInfoType3# => trait ClassInfoType3[T >: Nothing <: Any].{+1 decls}
  extends AnyRef
_root_.types.Test.C#ClassInfoType3#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#MethodType. => final object MethodType
_root_.types.Test.C#MethodType.m3(). => def m3: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m4(). => def m4: (): Int
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m5(Int). => def m5: (x: Int): Int
  x => _root_.types.Test.C#MethodType.m5(Int).(x)
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m5(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m6(T). => def m6: [T >: Nothing <: Any] => (x: T): T
  T => _root_.types.Test.C#MethodType.m6(T).[T]
  x => _root_.types.Test.C#MethodType.m6(T).(x)
_root_.types.Test.C#MethodType.m6(T).(x) => param x: T
  T => _root_.types.Test.C#MethodType.m6(T).[T]
_root_.types.Test.C#MethodType.m6(T).[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#MethodType.x1(). => def x1: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.x2(). => def x2: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType# => case class RepeatedType.{+12 decls}
  extends AnyRef
  extends Product
  extends Serializable
_root_.types.Test.C#RepeatedType#`<init>`(String*). => primaryctor <init>: (s: String*): C.this.RepeatedType
  s => _root_.types.Test.C#RepeatedType#`<init>`(String*).(s)
  C => _root_.types.Test.C#
  RepeatedType => _root_.types.Test.C#RepeatedType#
_root_.types.Test.C#RepeatedType#`<init>`(String*).(s) => valparam param s: String*
  String => _root_.scala.Predef.String#
_root_.types.Test.C#RepeatedType#canEqual(Any). => def canEqual: (x$1: Any): Boolean
  x$1 => _root_.types.Test.C#RepeatedType#canEqual(Any).(x$1)
  Boolean => _root_.scala.Boolean#
_root_.types.Test.C#RepeatedType#canEqual(Any).(x$1) => param x$1: Any
  Any => _root_.scala.Any#
_root_.types.Test.C#RepeatedType#equals(Any). => def equals: (x$1: Any): Boolean
  x$1 => _root_.types.Test.C#RepeatedType#equals(Any).(x$1)
  Boolean => _root_.scala.Boolean#
_root_.types.Test.C#RepeatedType#equals(Any).(x$1) => param x$1: Any
  Any => _root_.scala.Any#
_root_.types.Test.C#RepeatedType#hashCode(). => def hashCode: (): Int
  Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType#m1(Int*). => def m1: (x: Int*): Int
  x => _root_.types.Test.C#RepeatedType#m1(Int*).(x)
  Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType#m1(Int*).(x) => param x: Int*
  Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType#productArity(). => def productArity: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType#productElement(Int). => def productElement: (x$1: Int): Any
  x$1 => _root_.types.Test.C#RepeatedType#productElement(Int).(x$1)
  Any => _root_.scala.Any#
_root_.types.Test.C#RepeatedType#productElement(Int).(x$1) => param x$1: Int
  Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType#productIterator(). => def productIterator: : Iterator[Any]
  Iterator => _root_.scala.collection.Iterator#
  Any => _root_.scala.Any#
_root_.types.Test.C#RepeatedType#productPrefix(). => def productPrefix: : String
  String => _root_.java.lang.String#
_root_.types.Test.C#RepeatedType#s(). => getter s: : String*
  String => _root_.scala.Predef.String#
_root_.types.Test.C#RepeatedType#s. => private[this] val s: String*
  String => _root_.scala.Predef.String#
_root_.types.Test.C#RepeatedType#toString(). => def toString: (): String
  String => _root_.java.lang.String#
_root_.types.Test.C#RepeatedType. => final object RepeatedType
_root_.types.Test.C#RepeatedType.apply(String*). => case def apply: (s: String*): C.this.RepeatedType
  s => _root_.types.Test.C#RepeatedType.apply(String*).(s)
  C => _root_.types.Test.C#
  RepeatedType => _root_.types.Test.C#RepeatedType#
_root_.types.Test.C#RepeatedType.apply(String*).(s) => param s: String*
  String => _root_.scala.Predef.String#
_root_.types.Test.C#RepeatedType.toString(). => final def toString: (): String
  String => _root_.java.lang.String#
_root_.types.Test.C#RepeatedType.unapplySeq(RepeatedType). => case def unapplySeq: (x$0: C.this.RepeatedType): Option[Seq[String]]
  x$0 => _root_.types.Test.C#RepeatedType.unapplySeq(RepeatedType).(x$0)
  Option => _root_.scala.Option#
  Seq => _root_.scala.package.Seq#
  String => _root_.scala.Predef.String#
_root_.types.Test.C#RepeatedType.unapplySeq(RepeatedType).(x$0) => param x$0: C.this.RepeatedType
  C => _root_.types.Test.C#
  RepeatedType => _root_.types.Test.C#RepeatedType#
_root_.types.Test.C#TypeType. => final object TypeType
_root_.types.Test.C#TypeType.T1# => abstract type T1: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#TypeType.T4# => type T4: C
  C => _root_.types.Test.C#
_root_.types.Test.C#TypeType.T5# => type T5: [U >: Nothing <: Any] => U
  U => _root_.types.Test.C#TypeType.T5#[U]
_root_.types.Test.C#TypeType.T5#[U] => typeparam U: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#TypeType.m2(). => def m2: [T2 >: C <: C] => : Nothing
  T2 => _root_.types.Test.C#TypeType.m2().[T2]
  Nothing => _root_.scala.Nothing#
_root_.types.Test.C#TypeType.m2().[T2] => typeparam T2: >: C <: C
  C => _root_.types.Test.C#
_root_.types.Test.C#TypeType.m3(). => def m3: [M3 [_ >: Nothing <: Any] => >: Nothing <: Any] => : Nothing
  M3 => _root_.types.Test.C#TypeType.m3().[M3]
  Nothing => _root_.scala.Nothing#
_root_.types.Test.C#TypeType.m3().[M3] => typeparam M3: [_ >: Nothing <: Any] => >: Nothing <: Any
  _ => _root_.types.Test.C#TypeType.m3().[M3][_]
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#TypeType.m3().[M3][_] => typeparam _: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#`<init>`(). => primaryctor <init>: (): C
  C => _root_.types.Test.C#
_root_.types.Test.C#`<refinement>`# => class <refinement>
_root_.types.Test.C#`<refinement>`# => class <refinement>
_root_.types.Test.C#`<refinement>`# => class <refinement>
_root_.types.Test.C#`<refinement>`#k(). => abstract def k: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#`<refinement>`#k(). => abstract def k: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#annType1(). => getter annType1: : T 
  T => _root_.types.T#
_root_.types.Test.C#annType1. => private[this] val annType1: T 
  T => _root_.types.T#
_root_.types.Test.C#annType2(). => getter annType2: : T 
  T => _root_.types.T#
_root_.types.Test.C#annType2. => private[this] val annType2: T 
  T => _root_.types.T#
_root_.types.Test.C#compoundType1(). => getter compoundType1: : AnyRef { <?> }
  AnyRef => _root_.scala.AnyRef#
  k => _root_.types.Test.C#`<refinement>`#k().
_root_.types.Test.C#compoundType1. => private[this] val compoundType1: AnyRef { <?> }
  AnyRef => _root_.scala.AnyRef#
  k => _root_.types.Test.C#`<refinement>`#k().
_root_.types.Test.C#compoundType2(). => getter compoundType2: : M with N
  M => _root_.types.Test.M#
  N => _root_.types.Test.N#
_root_.types.Test.C#compoundType2. => private[this] val compoundType2: M with N
  M => _root_.types.Test.M#
  N => _root_.types.Test.N#
_root_.types.Test.C#compoundType3(). => getter compoundType3: : M with N { <?> }
  M => _root_.types.Test.M#
  N => _root_.types.Test.N#
  k => _root_.types.Test.C#`<refinement>`#k().
_root_.types.Test.C#compoundType3. => private[this] val compoundType3: M with N { <?> }
  M => _root_.types.Test.M#
  N => _root_.types.Test.N#
  k => _root_.types.Test.C#`<refinement>`#k().
_root_.types.Test.C#existentialType1(). => getter existentialType1: : T forSome { type T >: Nothing <: Any }
  T => _root_.types.Test.C#existentialType1.T#
_root_.types.Test.C#existentialType1. => private[this] val existentialType1: T forSome { type T >: Nothing <: Any }
  T => _root_.types.Test.C#existentialType1.T#
_root_.types.Test.C#existentialType1.T# => abstract type T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#p(). => getter p: : P
  P => _root_.types.P#
_root_.types.Test.C#p. => private[this] val p: P
  P => _root_.types.P#
_root_.types.Test.C#singleType1(). => getter singleType1: : C.this.x.type
  C => _root_.types.Test.C#
  x => _root_.types.Test.C#x().
_root_.types.Test.C#singleType1. => private[this] val singleType1: C.this.x.type
  C => _root_.types.Test.C#
  x => _root_.types.Test.C#x().
_root_.types.Test.C#singleType2(). => getter singleType2: : C.this.p.x.type
  C => _root_.types.Test.C#
  p => _root_.types.Test.C#p().
  x => _root_.types.P.x#
_root_.types.Test.C#singleType2. => private[this] val singleType2: C.this.p.x.type
  C => _root_.types.Test.C#
  p => _root_.types.Test.C#p().
  x => _root_.types.P.x#
_root_.types.Test.C#superType1(). => getter superType1: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#superType1. => private[this] val superType1: Int
  Int => _root_.scala.Int#
_root_.types.Test.C#superType2(). => getter superType2: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#superType2. => private[this] val superType2: Int
  Int => _root_.scala.Int#
_root_.types.Test.C#superType3(). => getter superType3: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#superType3. => private[this] val superType3: Int
  Int => _root_.scala.Int#
_root_.types.Test.C#thisType1(). => getter thisType1: : C.this.type
  C => _root_.types.Test.C#
_root_.types.Test.C#thisType1. => private[this] val thisType1: C.this.type
  C => _root_.types.Test.C#
_root_.types.Test.C#thisType2(). => getter thisType2: : C.this.type
  C => _root_.types.Test.C#
_root_.types.Test.C#thisType2. => private[this] val thisType2: C.this.type
  C => _root_.types.Test.C#
_root_.types.Test.C#typeLambda1(). => def typeLambda1: [M [_ >: Nothing <: Any] => >: Nothing <: Any] => : Nothing
  M => _root_.types.Test.C#typeLambda1().[M]
  Nothing => _root_.scala.Nothing#
_root_.types.Test.C#typeLambda1().[M] => typeparam M: [_ >: Nothing <: Any] => >: Nothing <: Any
  _ => _root_.types.Test.C#typeLambda1().[M][_]
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#typeLambda1().[M][_] => typeparam _: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#typeRef1(). => getter typeRef1: : C
  C => _root_.types.Test.C#
_root_.types.Test.C#typeRef1. => private[this] val typeRef1: C
  C => _root_.types.Test.C#
_root_.types.Test.C#typeRef2(). => getter typeRef2: : C.this.p.C
  C => _root_.types.Test.C#
  p => _root_.types.Test.C#p().
  C => _root_.types.P.C#
_root_.types.Test.C#typeRef2. => private[this] val typeRef2: C.this.p.C
  C => _root_.types.Test.C#
  p => _root_.types.Test.C#p().
  C => _root_.types.P.C#
_root_.types.Test.C#typeRef3(). => getter typeRef3: : T#C
  T => _root_.types.T#
  C => _root_.types.T.C#
_root_.types.Test.C#typeRef3. => private[this] val typeRef3: T#C
  T => _root_.types.T#
  C => _root_.types.T.C#
_root_.types.Test.C#typeRef4(). => getter typeRef4: : List[Int]
  List => _root_.scala.package.List#
  Int => _root_.scala.Int#
_root_.types.Test.C#typeRef4. => private[this] val typeRef4: List[Int]
  List => _root_.scala.package.List#
  Int => _root_.scala.Int#
_root_.types.Test.C#x(). => getter x: : C.this.p.X
  C => _root_.types.Test.C#
  p => _root_.types.Test.C#p().
  X => _root_.types.P.X#
_root_.types.Test.C#x. => private[this] val x: C.this.p.X
  C => _root_.types.Test.C#
  p => _root_.types.Test.C#p().
  X => _root_.types.P.X#
_root_.types.Test.Literal. => final object Literal
_root_.types.Test.Literal.bool(). => final getter bool: : true
_root_.types.Test.Literal.bool. => private[this] final val bool: true
_root_.types.Test.Literal.char(). => final getter char: : 'a'
_root_.types.Test.Literal.char. => private[this] final val char: 'a'
_root_.types.Test.Literal.clazzOf(). => final getter clazzOf: : Class[Option[Int]]
  Class => _root_.java.lang.Class#
  Option => _root_.scala.Option#
  Int => _root_.scala.Int#
_root_.types.Test.Literal.clazzOf. => private[this] final val clazzOf: Class[Option[Int]]
  Class => _root_.java.lang.Class#
  Option => _root_.scala.Option#
  Int => _root_.scala.Int#
_root_.types.Test.Literal.double(). => final getter double: : 2.0
_root_.types.Test.Literal.double. => private[this] final val double: 2.0
_root_.types.Test.Literal.float(). => final getter float: : 1.0f
_root_.types.Test.Literal.float. => private[this] final val float: 1.0f
_root_.types.Test.Literal.int(). => final getter int: : 1
_root_.types.Test.Literal.int. => private[this] final val int: 1
_root_.types.Test.Literal.javaEnum(<?>). => final getter javaEnum
_root_.types.Test.Literal.javaEnum. => private[this] final val javaEnum
_root_.types.Test.Literal.long(). => final getter long: : 1L
_root_.types.Test.Literal.long. => private[this] final val long: 1L
_root_.types.Test.Literal.nil(). => final getter nil: : null
_root_.types.Test.Literal.nil. => private[this] final val nil: null
_root_.types.Test.Literal.string(). => final getter string: : "a"
_root_.types.Test.Literal.string. => private[this] final val string: "a"
_root_.types.Test.Literal.unit(). => final getter unit: : Unit
  Unit => _root_.scala.Unit#
_root_.types.Test.Literal.unit. => private[this] final val unit: Unit
  Unit => _root_.scala.Unit#
_root_.types.Test.M# => class M.{+2 decls}
  extends AnyRef
_root_.types.Test.M#`<init>`(). => primaryctor <init>: (): M
  M => _root_.types.Test.M#
_root_.types.Test.M#m(). => def m: : Int
  Int => _root_.scala.Int#
_root_.types.Test.N# => class N.{+2 decls}
  extends AnyRef
_root_.types.Test.N#`<init>`(). => primaryctor <init>: (): N
  N => _root_.types.Test.N#
_root_.types.Test.N#n(). => def n: : Int
  Int => _root_.scala.Int#

types/ann.class
---------------

Summary:
Schema => SemanticDB v3
Uri => types/ann.class
Text => empty
Language => Scala
Symbols => 7 entries

Symbols:
_root_. => package _root_
_root_.types. => package types
_root_.types.ann# => class ann[T >: Nothing <: Any].{+3 decls}
  extends Annotation
  extends StaticAnnotation
_root_.types.ann#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.ann#`<init>`(T). => primaryctor <init>: (x: T): ann[T]
  x => _root_.types.ann#`<init>`(T).(x)
  ann => _root_.types.ann#
  T => _root_.types.ann#[T]
_root_.types.ann#`<init>`(T).(x) => param x: T
  T => _root_.types.ann#[T]
_root_.types.ann#x. => private[this] val x: T
  T => _root_.types.ann#[T]

types/ann1.class
----------------

Summary:
Schema => SemanticDB v3
Uri => types/ann1.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_root_. => package _root_
_root_.types. => package types
_root_.types.ann1# => class ann1.{+1 decls}
  extends Annotation
  extends StaticAnnotation
_root_.types.ann1#`<init>`(). => primaryctor <init>: (): ann1
  ann1 => _root_.types.ann1#

types/ann2.class
----------------

Summary:
Schema => SemanticDB v3
Uri => types/ann2.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_root_. => package _root_
_root_.types. => package types
_root_.types.ann2# => class ann2.{+1 decls}
  extends Annotation
  extends StaticAnnotation
_root_.types.ann2#`<init>`(). => primaryctor <init>: (): ann2
  ann2 => _root_.types.ann2#
