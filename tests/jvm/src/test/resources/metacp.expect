example/A.class
---------------

Summary:
Schema => SemanticDB v3
Uri => example/A.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
example.A# => trait A.{+1 decls}
  extends AnyRef
example.A#foo(0). => abstract def foo: : Int
  Int => scala.Int#

example/B.class
---------------

Summary:
Schema => SemanticDB v3
Uri => example/B.class
Text => empty
Language => Scala
Symbols => 3 entries

Symbols:
example.B# => class B.{+2 decls}
  extends AnyRef
  extends A
example.B#`<init>`(0). => primaryctor <init>: (): B
  B => example.B#
example.B#foo(0). => def foo: : Int
  Int => scala.Int#

example/Example.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => example/Example.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
example.Example. => final object Example
example.Example.main(1). => def main: (args: Array[String]): Unit
  args => example.Example.main(1).(args)
  Unit => scala.Unit#
example.Example.main(1).(args) => param args: Array[String]
  Array => scala.Array#
  String => scala.Predef.String#
example.Example.x. => val x: : ClassTag[Int]
  ClassTag => scala.reflect.ClassTag#
  Int => scala.Int#

example/Synthetic.class
-----------------------

Summary:
Schema => SemanticDB v3
Uri => example/Synthetic.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
example.Synthetic# => class Synthetic.{+1 decls}
  extends AnyRef
example.Synthetic#`<init>`(0). => primaryctor <init>: (): Synthetic
  Synthetic => example.Synthetic#

example/local-file.class
------------------------

Summary:
Schema => SemanticDB v3
Uri => example/local-file.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
example.`local-file`# => class local-file.{+1 decls}
  extends AnyRef
example.`local-file`#`<init>`(0). => primaryctor <init>: (): local-file
  local-file => example.`local-file`#

exclude/Exclude.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => exclude/Exclude.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
exclude.Exclude# => class Exclude.{+1 decls}
  extends AnyRef
exclude.Exclude#`<init>`(0). => primaryctor <init>: (): Exclude
  Exclude => exclude.Exclude#

flags/p/package.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => flags/p/package.class
Text => empty
Language => Scala
Symbols => 35 entries

Symbols:
flags.p.package. => final package object package
flags.p.package.AA# => class AA.{+7 decls}
  extends AnyRef
flags.p.package.AA#(x) => param x: Int
  Int => scala.Int#
flags.p.package.AA#(y) => val param y: : Int
  Int => scala.Int#
flags.p.package.AA#(z) => val param z: : Int
  Int => scala.Int#
flags.p.package.AA#`<init>`(3). => primaryctor <init>: (x: Int, y: Int, z: Int): AA
  x => flags.p.package.AA#`<init>`(3).(x)
  y => flags.p.package.AA#`<init>`(3).(y)
  z => flags.p.package.AA#`<init>`(3).(z)
  AA => flags.p.package.AA#
flags.p.package.AA#`<init>`(3).(x) => param x: Int
  Int => scala.Int#
flags.p.package.AA#`<init>`(3).(y) => param y: Int
  Int => scala.Int#
flags.p.package.AA#`<init>`(3).(z) => param z: Int
  Int => scala.Int#
flags.p.package.C# => abstract class C.{+9 decls}
  extends AnyRef
flags.p.package.C#(x) => param x: T
  T => flags.p.package.C#[T]
flags.p.package.C#(y) => param y: U
  U => flags.p.package.C#[U]
flags.p.package.C#(z) => param z: V
  V => flags.p.package.C#[V]
flags.p.package.C#[T] => covariant typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.C#[U] => contravariant typeparam U: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.C#[V] => typeparam V: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.C#`<init>`(0). => secondaryctor <init>: (): C[T, U, V]
  C => flags.p.package.C#
  T => flags.p.package.C#[T]
  U => flags.p.package.C#[U]
  V => flags.p.package.C#[V]
flags.p.package.C#`<init>`(3). => primaryctor <init>: (x: T, y: U, z: V): C[T, U, V]
  x => flags.p.package.C#`<init>`(3).(x)
  y => flags.p.package.C#`<init>`(3).(y)
  z => flags.p.package.C#`<init>`(3).(z)
  C => flags.p.package.C#
  T => flags.p.package.C#[T]
  U => flags.p.package.C#[U]
  V => flags.p.package.C#[V]
flags.p.package.C#`<init>`(3).(x) => param x: T
  T => flags.p.package.C#[T]
flags.p.package.C#`<init>`(3).(y) => param y: U
  U => flags.p.package.C#[U]
flags.p.package.C#`<init>`(3).(z) => param z: V
  V => flags.p.package.C#[V]
flags.p.package.C#w(0). => abstract def w: : Int
  Int => scala.Int#
flags.p.package.T# => type T: Int
  Int => scala.Int#
flags.p.package.U# => abstract type U: >: Nothing <: Int
  Nothing => scala.Nothing#
  Int => scala.Int#
flags.p.package.V# => abstract type V: >: Int <: Any
  Int => scala.Int#
  Any => scala.Any#
flags.p.package.X. => final case object X
flags.p.package.Y# => final class Y.{+1 decls}
  extends AnyRef
flags.p.package.Y#`<init>`(0). => primaryctor <init>: (): Y
  Y => flags.p.package.Y#
flags.p.package.Z# => sealed trait Z
  extends AnyRef
flags.p.package.m(0). => macro m: [TT >: Nothing <: Any] => : Nothing
  TT => flags.p.package.m(0).[TT]
  Nothing => scala.Nothing#
flags.p.package.m(0).[TT] => typeparam TT: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.x. => private lazy val x: : Int
  Int => scala.Int#
flags.p.package.y. => protected implicit val y: : Int
  Int => scala.Int#
flags.p.package.z(1). => def z: (pp: Int): Int
  pp => flags.p.package.z(1).(pp)
  Int => scala.Int#
flags.p.package.z(1).(pp) => param pp: Int
  Int => scala.Int#

types/B.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/B.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
types.B# => class B.{+1 decls}
  extends AnyRef
types.B#`<init>`(0). => primaryctor <init>: (): B
  B => types.B#

types/C.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/C.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
types.C# => class C.{+1 decls}
  extends AnyRef
types.C#`<init>`(0). => primaryctor <init>: (): C
  C => types.C#

types/P.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/P.class
Text => empty
Language => Scala
Symbols => 7 entries

Symbols:
types.P# => class P.{+5 decls}
  extends AnyRef
types.P#C# => class C.{+1 decls}
  extends AnyRef
types.P#C#`<init>`(0). => primaryctor <init>: (): P.this.C
  P => types.P#
  C => types.P#C#
types.P#X# => class X.{+1 decls}
  extends AnyRef
types.P#X#`<init>`(0). => primaryctor <init>: (): P.this.X
  P => types.P#
  X => types.P#X#
types.P#`<init>`(0). => primaryctor <init>: (): P
  P => types.P#
types.P#x. => val x: : P.this.X
  P => types.P#
  X => types.P#X#

types/T.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/T.class
Text => empty
Language => Scala
Symbols => 7 entries

Symbols:
types.T# => class T.{+5 decls}
  extends AnyRef
types.T#C# => class C.{+1 decls}
  extends AnyRef
types.T#C#`<init>`(0). => primaryctor <init>: (): T.this.C
  T => types.T#
  C => types.T#C#
types.T#X# => class X.{+1 decls}
  extends AnyRef
types.T#X#`<init>`(0). => primaryctor <init>: (): T.this.X
  T => types.T#
  X => types.T#X#
types.T#`<init>`(0). => primaryctor <init>: (): T
  T => types.T#
types.T#x. => val x: : T.this.X
  T => types.T#
  X => types.T#X#

types/Test.class
----------------

Summary:
Schema => SemanticDB v3
Uri => types/Test.class
Text => empty
Language => Scala
Symbols => 84 entries

Symbols:
types.Test. => final object Test
types.Test.C# => class C.{+56 decls}
  extends M
types.Test.C#ByNameType. => final object ByNameType
types.Test.C#ByNameType.m1(1). => def m1: (x: => Int): Int
  x => types.Test.C#ByNameType.m1(1).(x)
  Int => scala.Int#
types.Test.C#ByNameType.m1(1).(x) => param x: => Int
  Int => scala.Int#
types.Test.C#ClassInfoType1. => final object ClassInfoType1
types.Test.C#ClassInfoType2# => class ClassInfoType2.{+2 decls}
  extends B
types.Test.C#ClassInfoType2#`<init>`(0). => primaryctor <init>: (): C.this.ClassInfoType2
  C => types.Test.C#
  ClassInfoType2 => types.Test.C#ClassInfoType2#
types.Test.C#ClassInfoType2#x(0). => def x: : Int
  Int => scala.Int#
types.Test.C#ClassInfoType3# => trait ClassInfoType3.{+1 decls}
  extends AnyRef
types.Test.C#ClassInfoType3#[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#MethodType. => final object MethodType
types.Test.C#MethodType.m3(0). => def m3: : Int
  Int => scala.Int#
types.Test.C#MethodType.m4(0). => def m4: (): Int
  Int => scala.Int#
types.Test.C#MethodType.m5(1). => def m5: (x: Int): Int
  x => types.Test.C#MethodType.m5(1).(x)
  Int => scala.Int#
types.Test.C#MethodType.m5(1).(x) => param x: Int
  Int => scala.Int#
types.Test.C#MethodType.m6(1). => def m6: [T >: Nothing <: Any] => (x: T): T
  T => types.Test.C#MethodType.m6(1).[T]
  x => types.Test.C#MethodType.m6(1).(x)
  T => types.Test.C#MethodType.m6(1).[T]
types.Test.C#MethodType.m6(1).(x) => param x: T
  T => types.Test.C#MethodType.m6(1).[T]
types.Test.C#MethodType.m6(1).[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#MethodType.x1(0). => def x1: : Int
  Int => scala.Int#
types.Test.C#MethodType.x2(0). => def x2: : Int
  Int => scala.Int#
types.Test.C#RepeatedType# => case class RepeatedType.{+12 decls}
  extends AnyRef
  extends Product
  extends Serializable
types.Test.C#RepeatedType#(s) => val param s: : String*
  String => scala.Predef.String#
types.Test.C#RepeatedType#`<init>`(1). => primaryctor <init>: (s: String*): C.this.RepeatedType
  s => types.Test.C#RepeatedType#`<init>`(1).(s)
  C => types.Test.C#
  RepeatedType => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#`<init>`(1).(s) => param s: String*
  String => scala.Predef.String#
types.Test.C#RepeatedType#m1(1). => def m1: (x: Int*): Int
  x => types.Test.C#RepeatedType#m1(1).(x)
  Int => scala.Int#
types.Test.C#RepeatedType#m1(1).(x) => param x: Int*
  Int => scala.Int#
types.Test.C#RepeatedType.apply(1).(s) => param s: String*
  String => scala.Predef.String#
types.Test.C#TypeType. => final object TypeType
types.Test.C#TypeType.T1# => abstract type T1: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#TypeType.T4# => type T4: C
  C => types.Test.C#
types.Test.C#TypeType.T5# => type T5: [U >: Nothing <: Any] => U
  U => types.Test.C#TypeType.T5#[U]
  U => types.Test.C#TypeType.T5#[U]
types.Test.C#TypeType.T5#[U] => typeparam U: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#TypeType.m2(0). => def m2: [T2 >: C <: C] => : Nothing
  T2 => types.Test.C#TypeType.m2(0).[T2]
  Nothing => scala.Nothing#
types.Test.C#TypeType.m2(0).[T2] => typeparam T2: >: C <: C
  C => types.Test.C#
  C => types.Test.C#
types.Test.C#TypeType.m3(0). => def m3: [M3 [_ >: Nothing <: Any] => >: Nothing <: Any] => : Nothing
  M3 => types.Test.C#TypeType.m3(0).[M3]
  Nothing => scala.Nothing#
types.Test.C#TypeType.m3(0).[M3] => typeparam M3: [_ >: Nothing <: Any] => >: Nothing <: Any
  _ => types.Test.C#TypeType.m3(0).[M3][_]
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#TypeType.m3(0).[M3][_] => typeparam _: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#`<init>`(0). => primaryctor <init>: (): C
  C => types.Test.C#
types.Test.C#`<refinement>`# => class <refinement>
types.Test.C#`<refinement>`# => class <refinement>
types.Test.C#`<refinement>`# => class <refinement>
types.Test.C#`<refinement>`#k(0). => abstract def k: : Int
  Int => scala.Int#
types.Test.C#`<refinement>`#k(0). => abstract def k: : Int
  Int => scala.Int#
types.Test.C#`existentialType1 `(0).T# => abstract type T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#annType1. => val annType1: : T 
  T => types.T#
types.Test.C#annType2. => val annType2: : T 
  T => types.T#
types.Test.C#compoundType1. => val compoundType1: : AnyRef { abstract <?> }
  AnyRef => scala.AnyRef#
  k => types.Test.C#`<refinement>`#k(0).
types.Test.C#compoundType2. => val compoundType2: : M with N
  M => types.Test.M#
  N => types.Test.N#
types.Test.C#compoundType3. => val compoundType3: : M with N { abstract <?> }
  M => types.Test.M#
  N => types.Test.N#
  k => types.Test.C#`<refinement>`#k(0).
types.Test.C#existentialType1. => val existentialType1: : T forSome { abstract type T >: Nothing <: Any }
  T => types.Test.C#`existentialType1 `(0).T#
  T => types.Test.C#`existentialType1 `(0).T#
types.Test.C#p. => val p: : P
  P => types.P#
types.Test.C#singleType1. => val singleType1: : C.this.x.type
  C => types.Test.C#
  x => types.Test.C#x.
types.Test.C#singleType2. => val singleType2: : C.this.p.x.type
  C => types.Test.C#
  p => types.Test.C#p.
  x => types.P.x#
types.Test.C#superType1. => val superType1: : Int
  Int => scala.Int#
types.Test.C#superType2. => val superType2: : Int
  Int => scala.Int#
types.Test.C#superType3. => val superType3: : Int
  Int => scala.Int#
types.Test.C#thisType1. => val thisType1: : C.this.type
  C => types.Test.C#
types.Test.C#thisType2. => val thisType2: : C.this.type
  C => types.Test.C#
types.Test.C#typeLambda1(0). => def typeLambda1: [M [_ >: Nothing <: Any] => >: Nothing <: Any] => : Nothing
  M => types.Test.C#typeLambda1(0).[M]
  Nothing => scala.Nothing#
types.Test.C#typeLambda1(0).[M] => typeparam M: [_ >: Nothing <: Any] => >: Nothing <: Any
  _ => types.Test.C#typeLambda1(0).[M][_]
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#typeLambda1(0).[M][_] => typeparam _: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#typeRef1. => val typeRef1: : C
  C => types.Test.C#
types.Test.C#typeRef2. => val typeRef2: : C.this.p.C
  C => types.Test.C#
  p => types.Test.C#p.
  C => types.P.C#
types.Test.C#typeRef3. => val typeRef3: : T#C
  T => types.T#
  C => types.T.C#
types.Test.C#typeRef4. => val typeRef4: : List[Int]
  List => scala.package.List#
  Int => scala.Int#
types.Test.C#x. => val x: : C.this.p.X
  C => types.Test.C#
  p => types.Test.C#p.
  X => types.P.X#
types.Test.Literal. => final object Literal
types.Test.Literal.bool. => final val bool: : true

types.Test.Literal.char. => final val char: : 'a'

types.Test.Literal.double. => final val double: : 2.0

types.Test.Literal.float. => final val float: : 1.0f

types.Test.Literal.int. => final val int: : 1

types.Test.Literal.javaEnum. => final val javaEnum
types.Test.Literal.long. => final val long: : 1L

types.Test.Literal.nil. => final val nil: : null

types.Test.Literal.string. => final val string: : "a"

types.Test.Literal.unit. => final val unit: : Unit
  Unit => scala.Unit#
types.Test.M# => class M.{+2 decls}
  extends AnyRef
types.Test.M#`<init>`(0). => primaryctor <init>: (): M
  M => types.Test.M#
types.Test.M#m(0). => def m: : Int
  Int => scala.Int#
types.Test.N# => class N.{+2 decls}
  extends AnyRef
types.Test.N#`<init>`(0). => primaryctor <init>: (): N
  N => types.Test.N#
types.Test.N#n(0). => def n: : Int
  Int => scala.Int#

types/ann.class
---------------

Summary:
Schema => SemanticDB v3
Uri => types/ann.class
Text => empty
Language => Scala
Symbols => 5 entries

Symbols:
types.ann# => class ann.{+3 decls}
  extends Annotation
  extends StaticAnnotation
types.ann#(x) => param x: T
  T => types.ann#[T]
types.ann#[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.ann#`<init>`(1). => primaryctor <init>: (x: T): ann[T]
  x => types.ann#`<init>`(1).(x)
  ann => types.ann#
  T => types.ann#[T]
types.ann#`<init>`(1).(x) => param x: T
  T => types.ann#[T]

types/ann1.class
----------------

Summary:
Schema => SemanticDB v3
Uri => types/ann1.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
types.ann1# => class ann1.{+1 decls}
  extends Annotation
  extends StaticAnnotation
types.ann1#`<init>`(0). => primaryctor <init>: (): ann1
  ann1 => types.ann1#

types/ann2.class
----------------

Summary:
Schema => SemanticDB v3
Uri => types/ann2.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
types.ann2# => class ann2.{+1 decls}
  extends Annotation
  extends StaticAnnotation
types.ann2#`<init>`(0). => primaryctor <init>: (): ann2
  ann2 => types.ann2#
