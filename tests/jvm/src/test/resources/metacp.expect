Empty.class
-----------

Summary:
Schema => SemanticDB v3
Uri => Empty.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
_empty_.Empty# => class Empty.{+1 decls}
  extends AnyRef
_empty_.Empty#`<init>`(). => primaryctor <init>: (): Empty
  Empty => _empty_.Empty#

example/A.class
---------------

Summary:
Schema => SemanticDB v3
Uri => example/A.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
_root_.example.A# => trait A.{+1 decls}
  extends AnyRef
_root_.example.A#foo(). => abstract def foo: : Int
  Int => _root_.scala.Int#

example/Acc.class
-----------------

Summary:
Schema => SemanticDB v3
Uri => example/Acc.class
Text => empty
Language => Scala
Symbols => 9 entries

Symbols:
_root_.example.Acc# => class Acc.{+8 decls}
  extends AnyRef
_root_.example.Acc#`<init>`(). => primaryctor <init>: (): Acc
  Acc => _root_.example.Acc#
_root_.example.Acc#m1(). => private def m1: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m2(). => private[this] def m2: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m3(). => private[Acc] def m3: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m4(). => protected def m4: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m5(). => protected[this] def m5: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m6(). => protected[example] def m6: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Acc#m7(). => def m7: : Nothing
  Nothing => _root_.scala.Nothing#

example/B.class
---------------

Summary:
Schema => SemanticDB v3
Uri => example/B.class
Text => empty
Language => Scala
Symbols => 3 entries

Symbols:
_root_.example.B# => class B.{+2 decls}
  extends AnyRef
  extends A
_root_.example.B#`<init>`(). => primaryctor <init>: (): B
  B => _root_.example.B#
_root_.example.B#foo(). => def foo: : Int
  Int => _root_.scala.Int#

example/Example.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => example/Example.class
Text => empty
Language => Scala
Symbols => 4 entries

Symbols:
_root_.example.Example. => final object Example
_root_.example.Example.main(Array). => def main: (args: Array[String]): Unit
  args => _root_.example.Example.main(Array).(args)
  Unit => _root_.scala.Unit#
_root_.example.Example.main(Array).(args) => param args: Array[String]
  Array => _root_.scala.Array#
  String => _root_.scala.Predef.String#
_root_.example.Example.x. => val x: : ClassTag[Int]
  ClassTag => _root_.scala.reflect.ClassTag#
  Int => _root_.scala.Int#

example/Methods.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => example/Methods.class
Text => empty
Language => Scala
Symbols => 59 entries

Symbols:
_root_.example.Methods# => class Methods.{+29 decls}
  extends AnyRef
_root_.example.Methods#AList# => type AList: [T >: Nothing <: Any] => Methods.this.List[T]
  T => _root_.example.Methods#AList#[T]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
_root_.example.Methods#AList#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#List# => class List.{+2 decls}
  extends AnyRef
_root_.example.Methods#List#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#List#`<init>`(). => primaryctor <init>: (): Methods.this.List[T]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
  T => _root_.example.Methods#List#[T]
_root_.example.Methods#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#`<init>`(). => primaryctor <init>: (): Methods[T]
  Methods => _root_.example.Methods#
  T => _root_.example.Methods#[T]
_root_.example.Methods#`<refinement>`# => class <refinement>
_root_.example.Methods#`<refinement>`# => class <refinement>
_root_.example.Methods#`<refinement>`#x. => abstract val x: : Int
  Int => _root_.scala.Int#
_root_.example.Methods#`m8().`(). => def m8().: (): Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#`m9().`# => class m9()..{+1 decls}
  extends AnyRef
_root_.example.Methods#`m9().`#`<init>`(). => primaryctor <init>: (): Methods.this.m9().
  Methods => _root_.example.Methods#
  m9(). => _root_.example.Methods#`m9().`#
_root_.example.Methods#m1(). => def m1: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m10(AList). => def m10: (x: Methods.this.AList[T]): Nothing
  x => _root_.example.Methods#m10(AList).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m10(AList).(x) => param x: Methods.this.AList[T]
  Methods => _root_.example.Methods#
  AList => _root_.example.Methods#AList#
  T => _root_.example.Methods#[T]
_root_.example.Methods#m11(.type+1). => def m11: (x: Predef.type): Nothing
  x => _root_.example.Methods#m11(.type+1).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m11(.type+1).(x) => param x: Predef.type
  Predef => _root_.scala.Predef.
_root_.example.Methods#m11(.type+2). => def m11: (x: Example.type): Nothing
  x => _root_.example.Methods#m11(.type+2).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m11(.type+2).(x) => param x: Example.type
  Example => _root_.example.Example.
_root_.example.Methods#m12a({}). => def m12a: (x: AnyRef {  }): Nothing
  x => _root_.example.Methods#m12a({}).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m12a({}).(x) => param x: AnyRef {  }
  AnyRef => _root_.scala.AnyRef#
_root_.example.Methods#m12b({}). => def m12b: (x: AnyRef { <?> }): Nothing
  x => _root_.example.Methods#m12b({}).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m12b({}).(x) => param x: AnyRef { <?> }
  AnyRef => _root_.scala.AnyRef#
  x => _root_.example.Methods#`<refinement>`#x.
_root_.example.Methods#m13(Int). => def m13: (x: Int): Nothing
  x => _root_.example.Methods#m13(Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m13(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m14(T). => def m14: (x: T forSome { type T >: Nothing <: Any }): Nothing
  x => _root_.example.Methods#m14(T).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m14(T).(x) => param x: T forSome { type T >: Nothing <: Any }
  T => _root_.example.Methods#m14(T).(x)T#
_root_.example.Methods#m14(T).(x)T# => abstract type T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#m15(=>Int). => def m15: (x: => Int): Nothing
  x => _root_.example.Methods#m15(=>Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m15(=>Int).(x) => param x: => Int
  Int => _root_.scala.Int#
_root_.example.Methods#m16(Int*). => def m16: (x: Int*): Nothing
  x => _root_.example.Methods#m16(Int*).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m16(Int*).(x) => param x: Int*
  Int => _root_.scala.Int#
_root_.example.Methods#m2(). => def m2: (): Nothing
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m3(Int). => def m3: (x: Int): Nothing
  x => _root_.example.Methods#m3(Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m3(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m4(Int,Int). => def m4: (x: Int)(y: Int): (y: Int): Nothing
  x => _root_.example.Methods#m4(Int,Int).(x)
  y => _root_.example.Methods#m4(Int,Int).(y)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m4(Int,Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m4(Int,Int).(y) => param y: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m5(Int). => def m5: (x: Int): Nothing
  x => _root_.example.Methods#m5(Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m5(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m5(String). => def m5: (x: String): Nothing
  x => _root_.example.Methods#m5(String).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m5(String).(x) => param x: String
  String => _root_.scala.Predef.String#
_root_.example.Methods#m6(Int). => def m6: (x: Int): Nothing
  x => _root_.example.Methods#m6(Int).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m6(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.example.Methods#m6(List+1). => def m6: (x: Methods.this.List[T]): Nothing
  x => _root_.example.Methods#m6(List+1).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m6(List+1).(x) => param x: Methods.this.List[T]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
  T => _root_.example.Methods#[T]
_root_.example.Methods#m6(List+2). => def m6: (x: List[T]): Nothing
  x => _root_.example.Methods#m6(List+2).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m6(List+2).(x) => param x: List[T]
  List => _root_.scala.package.List#
  T => _root_.example.Methods#[T]
_root_.example.Methods#m7a(Methods,List,Ordering). => def m7a: [U >: Nothing <: Any] => (c: Methods[T], l: Methods.this.List[U])(evidence$1: <?>): (evidence$1: <?>): Nothing
  U => _root_.example.Methods#m7a(Methods,List,Ordering).[U]
  c => _root_.example.Methods#m7a(Methods,List,Ordering).(c)
  l => _root_.example.Methods#m7a(Methods,List,Ordering).(l)
  evidence$1 => _root_.example.Methods#m7a(Methods,List,Ordering).(evidence$1)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m7a(Methods,List,Ordering).(c) => param c: Methods[T]
  Methods => _root_.example.Methods#
  T => _root_.example.Methods#[T]
_root_.example.Methods#m7a(Methods,List,Ordering).(l) => param l: Methods.this.List[U]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
  U => _root_.example.Methods#m7a(Methods,List,Ordering).[U]
_root_.example.Methods#m7a(Methods,List,Ordering).[U] => typeparam U: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#m7b(List,Function1). => def m7b: [U >: Nothing <: Any] => (l: Methods.this.List[U])(evidence$2: <?>): (evidence$2: <?>): Nothing
  U => _root_.example.Methods#m7b(List,Function1).[U]
  l => _root_.example.Methods#m7b(List,Function1).(l)
  evidence$2 => _root_.example.Methods#m7b(List,Function1).(evidence$2)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m7b(List,Function1).(l) => param l: Methods.this.List[U]
  Methods => _root_.example.Methods#
  List => _root_.example.Methods#List#
  U => _root_.example.Methods#m7b(List,Function1).[U]
_root_.example.Methods#m7b(List,Function1).[U] => typeparam U: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.example.Methods#m9(`m9().`). => def m9: (x: Methods.this.m9().): Nothing
  x => _root_.example.Methods#m9(`m9().`).(x)
  Nothing => _root_.scala.Nothing#
_root_.example.Methods#m9(`m9().`).(x) => param x: Methods.this.m9().
  Methods => _root_.example.Methods#
  m9(). => _root_.example.Methods#`m9().`#

example/Synthetic.class
-----------------------

Summary:
Schema => SemanticDB v3
Uri => example/Synthetic.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
_root_.example.Synthetic# => class Synthetic.{+1 decls}
  extends AnyRef
_root_.example.Synthetic#`<init>`(). => primaryctor <init>: (): Synthetic
  Synthetic => _root_.example.Synthetic#

example/Usages.class
--------------------

Summary:
Schema => SemanticDB v3
Uri => example/Usages.class
Text => empty
Language => Scala
Symbols => 3 entries

Symbols:
_root_.example.Usages# => class Usages.{+3 decls}
  extends AnyRef
_root_.example.Usages#`<init>`(). => primaryctor <init>: (): Usages
  Usages => _root_.example.Usages#
_root_.example.Usages#m. => val m: : Methods[Int]
  Methods => _root_.example.Methods#
  Int => _root_.scala.Int#

example/local-file.class
------------------------

Summary:
Schema => SemanticDB v3
Uri => example/local-file.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
_root_.example.`local-file`# => class local-file.{+1 decls}
  extends AnyRef
_root_.example.`local-file`#`<init>`(). => primaryctor <init>: (): local-file
  local-file => _root_.example.`local-file`#

exclude/Exclude.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => exclude/Exclude.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
_root_.exclude.Exclude# => class Exclude.{+1 decls}
  extends AnyRef
_root_.exclude.Exclude#`<init>`(). => primaryctor <init>: (): Exclude
  Exclude => _root_.exclude.Exclude#

flags/p/package.class
---------------------

Summary:
Schema => SemanticDB v3
Uri => flags/p/package.class
Text => empty
Language => Scala
Symbols => 39 entries

Symbols:
_root_.flags.p.package. => final package object package
_root_.flags.p.package.AA# => class AA.{+7 decls}
  extends AnyRef
_root_.flags.p.package.AA#(x) => private[this] param x: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#(y) => valparam param y: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#(z) => valparam param z: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#`<init>`(Int,Int,Int). => primaryctor <init>: (x: Int, y: Int, z: Int): AA
  x => _root_.flags.p.package.AA#`<init>`(Int,Int,Int).(x)
  y => _root_.flags.p.package.AA#`<init>`(Int,Int,Int).(y)
  z => _root_.flags.p.package.AA#`<init>`(Int,Int,Int).(z)
  AA => _root_.flags.p.package.AA#
_root_.flags.p.package.AA#`<init>`(Int,Int,Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#`<init>`(Int,Int,Int).(y) => param y: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.AA#`<init>`(Int,Int,Int).(z) => param z: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.C# => abstract class C.{+9 decls}
  extends AnyRef
_root_.flags.p.package.C#(x) => private[this] param x: T
  T => _root_.flags.p.package.C#[T]
_root_.flags.p.package.C#(y) => private[this] param y: U
  U => _root_.flags.p.package.C#[U]
_root_.flags.p.package.C#(z) => private[this] param z: V
  V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#[T] => covariant typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.C#[U] => contravariant typeparam U: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.C#[V] => typeparam V: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.C#`<init>`(). => secondaryctor <init>: (): C[T, U, V]
  C => _root_.flags.p.package.C#
  T => _root_.flags.p.package.C#[T]
  U => _root_.flags.p.package.C#[U]
  V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#`<init>`(T,U,V). => primaryctor <init>: (x: T, y: U, z: V): C[T, U, V]
  x => _root_.flags.p.package.C#`<init>`(T,U,V).(x)
  y => _root_.flags.p.package.C#`<init>`(T,U,V).(y)
  z => _root_.flags.p.package.C#`<init>`(T,U,V).(z)
  C => _root_.flags.p.package.C#
  T => _root_.flags.p.package.C#[T]
  U => _root_.flags.p.package.C#[U]
  V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#`<init>`(T,U,V).(x) => param x: T
  T => _root_.flags.p.package.C#[T]
_root_.flags.p.package.C#`<init>`(T,U,V).(y) => param y: U
  U => _root_.flags.p.package.C#[U]
_root_.flags.p.package.C#`<init>`(T,U,V).(z) => param z: V
  V => _root_.flags.p.package.C#[V]
_root_.flags.p.package.C#w(). => abstract def w: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.S# => class S.{+2 decls}
  extends AnyRef
_root_.flags.p.package.S#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.S#`<init>`(). => primaryctor <init>: (): S[T]
  S => _root_.flags.p.package.S#
  T => _root_.flags.p.package.S#[T]
_root_.flags.p.package.T# => type T: Int
  Int => _root_.scala.Int#
_root_.flags.p.package.U# => abstract type U: >: Nothing <: Int
  Nothing => _root_.scala.Nothing#
  Int => _root_.scala.Int#
_root_.flags.p.package.V# => abstract type V: >: Int <: Any
  Int => _root_.scala.Int#
  Any => _root_.scala.Any#
_root_.flags.p.package.X. => final case object X
_root_.flags.p.package.Y# => final class Y.{+1 decls}
  extends AnyRef
_root_.flags.p.package.Y#`<init>`(). => primaryctor <init>: (): Y
  Y => _root_.flags.p.package.Y#
_root_.flags.p.package.Z# => sealed trait Z
  extends AnyRef
_root_.flags.p.package.m(). => macro m: [TT >: Nothing <: Any] => : Nothing
  TT => _root_.flags.p.package.m().[TT]
  Nothing => _root_.scala.Nothing#
_root_.flags.p.package.m().[TT] => typeparam TT: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.flags.p.package.x. => private lazy val x: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.xs1. => val xs1: : Nothing
  Nothing => _root_.scala.Nothing#
_root_.flags.p.package.y. => protected implicit val y: : Int
  Int => _root_.scala.Int#
_root_.flags.p.package.z(Int). => def z: (pp: Int): Int
  pp => _root_.flags.p.package.z(Int).(pp)
  Int => _root_.scala.Int#
_root_.flags.p.package.z(Int).(pp) => param pp: Int
  Int => _root_.scala.Int#

types/B.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/B.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
_root_.types.B# => class B.{+1 decls}
  extends AnyRef
_root_.types.B#`<init>`(). => primaryctor <init>: (): B
  B => _root_.types.B#

types/C.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/C.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
_root_.types.C# => class C.{+1 decls}
  extends AnyRef
_root_.types.C#`<init>`(). => primaryctor <init>: (): C
  C => _root_.types.C#

types/P.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/P.class
Text => empty
Language => Scala
Symbols => 7 entries

Symbols:
_root_.types.P# => class P.{+5 decls}
  extends AnyRef
_root_.types.P#C# => class C.{+1 decls}
  extends AnyRef
_root_.types.P#C#`<init>`(). => primaryctor <init>: (): P.this.C
  P => _root_.types.P#
  C => _root_.types.P#C#
_root_.types.P#X# => class X.{+1 decls}
  extends AnyRef
_root_.types.P#X#`<init>`(). => primaryctor <init>: (): P.this.X
  P => _root_.types.P#
  X => _root_.types.P#X#
_root_.types.P#`<init>`(). => primaryctor <init>: (): P
  P => _root_.types.P#
_root_.types.P#x. => val x: : P.this.X
  P => _root_.types.P#
  X => _root_.types.P#X#

types/T.class
-------------

Summary:
Schema => SemanticDB v3
Uri => types/T.class
Text => empty
Language => Scala
Symbols => 7 entries

Symbols:
_root_.types.T# => class T.{+5 decls}
  extends AnyRef
_root_.types.T#C# => class C.{+1 decls}
  extends AnyRef
_root_.types.T#C#`<init>`(). => primaryctor <init>: (): T.this.C
  T => _root_.types.T#
  C => _root_.types.T#C#
_root_.types.T#X# => class X.{+1 decls}
  extends AnyRef
_root_.types.T#X#`<init>`(). => primaryctor <init>: (): T.this.X
  T => _root_.types.T#
  X => _root_.types.T#X#
_root_.types.T#`<init>`(). => primaryctor <init>: (): T
  T => _root_.types.T#
_root_.types.T#x. => val x: : T.this.X
  T => _root_.types.T#
  X => _root_.types.T#X#

types/Test.class
----------------

Summary:
Schema => SemanticDB v3
Uri => types/Test.class
Text => empty
Language => Scala
Symbols => 85 entries

Symbols:
_root_.types.Test. => final object Test
_root_.types.Test.C# => class C.{+56 decls}
  extends M
_root_.types.Test.C#ByNameType. => final object ByNameType
_root_.types.Test.C#ByNameType.m1(=>Int). => def m1: (x: => Int): Int
  x => _root_.types.Test.C#ByNameType.m1(=>Int).(x)
  Int => _root_.scala.Int#
_root_.types.Test.C#ByNameType.m1(=>Int).(x) => param x: => Int
  Int => _root_.scala.Int#
_root_.types.Test.C#ClassInfoType1. => final object ClassInfoType1
_root_.types.Test.C#ClassInfoType2# => class ClassInfoType2.{+2 decls}
  extends B
_root_.types.Test.C#ClassInfoType2#`<init>`(). => primaryctor <init>: (): C.this.ClassInfoType2
  C => _root_.types.Test.C#
  ClassInfoType2 => _root_.types.Test.C#ClassInfoType2#
_root_.types.Test.C#ClassInfoType2#x(). => def x: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#ClassInfoType3# => trait ClassInfoType3.{+1 decls}
  extends AnyRef
_root_.types.Test.C#ClassInfoType3#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#MethodType. => final object MethodType
_root_.types.Test.C#MethodType.m3(). => def m3: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m4(). => def m4: (): Int
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m5(Int). => def m5: (x: Int): Int
  x => _root_.types.Test.C#MethodType.m5(Int).(x)
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m5(Int).(x) => param x: Int
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.m6(T). => def m6: [T >: Nothing <: Any] => (x: T): T
  T => _root_.types.Test.C#MethodType.m6(T).[T]
  x => _root_.types.Test.C#MethodType.m6(T).(x)
_root_.types.Test.C#MethodType.m6(T).(x) => param x: T
  T => _root_.types.Test.C#MethodType.m6(T).[T]
_root_.types.Test.C#MethodType.m6(T).[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#MethodType.x1(). => def x1: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#MethodType.x2(). => def x2: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType# => case class RepeatedType.{+12 decls}
  extends AnyRef
  extends Product
  extends Serializable
_root_.types.Test.C#RepeatedType#(s) => valparam param s: : String*
  String => _root_.scala.Predef.String#
_root_.types.Test.C#RepeatedType#`<init>`(String*). => primaryctor <init>: (s: String*): C.this.RepeatedType
  s => _root_.types.Test.C#RepeatedType#`<init>`(String*).(s)
  C => _root_.types.Test.C#
  RepeatedType => _root_.types.Test.C#RepeatedType#
_root_.types.Test.C#RepeatedType#`<init>`(String*).(s) => param s: String*
  String => _root_.scala.Predef.String#
_root_.types.Test.C#RepeatedType#m1(Int*). => def m1: (x: Int*): Int
  x => _root_.types.Test.C#RepeatedType#m1(Int*).(x)
  Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType#m1(Int*).(x) => param x: Int*
  Int => _root_.scala.Int#
_root_.types.Test.C#RepeatedType.apply(String*).(s) => param s: String*
  String => _root_.scala.Predef.String#
_root_.types.Test.C#TypeType. => final object TypeType
_root_.types.Test.C#TypeType.T1# => abstract type T1: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#TypeType.T4# => type T4: C
  C => _root_.types.Test.C#
_root_.types.Test.C#TypeType.T5# => type T5: [U >: Nothing <: Any] => U
  U => _root_.types.Test.C#TypeType.T5#[U]
_root_.types.Test.C#TypeType.T5#[U] => typeparam U: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#TypeType.m2(). => def m2: [T2 >: C <: C] => : Nothing
  T2 => _root_.types.Test.C#TypeType.m2().[T2]
  Nothing => _root_.scala.Nothing#
_root_.types.Test.C#TypeType.m2().[T2] => typeparam T2: >: C <: C
  C => _root_.types.Test.C#
_root_.types.Test.C#TypeType.m3(). => def m3: [M3 [_ >: Nothing <: Any] => >: Nothing <: Any] => : Nothing
  M3 => _root_.types.Test.C#TypeType.m3().[M3]
  Nothing => _root_.scala.Nothing#
_root_.types.Test.C#TypeType.m3().[M3] => typeparam M3: [_ >: Nothing <: Any] => >: Nothing <: Any
  _ => _root_.types.Test.C#TypeType.m3().[M3][_]
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#TypeType.m3().[M3][_] => typeparam _: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#`<init>`(). => primaryctor <init>: (): C
  C => _root_.types.Test.C#
_root_.types.Test.C#`<refinement>`# => class <refinement>
_root_.types.Test.C#`<refinement>`# => class <refinement>
_root_.types.Test.C#`<refinement>`# => class <refinement>
_root_.types.Test.C#`<refinement>`#k(). => abstract def k: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#`<refinement>`#k(). => abstract def k: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#`existentialType1 `(T).T# => abstract type T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#annType1. => val annType1: : T 
  T => _root_.types.T#
_root_.types.Test.C#annType2. => val annType2: : T 
  T => _root_.types.T#
_root_.types.Test.C#compoundType1. => val compoundType1: : AnyRef { <?> }
  AnyRef => _root_.scala.AnyRef#
  k => _root_.types.Test.C#`<refinement>`#k().
_root_.types.Test.C#compoundType2. => val compoundType2: : M with N
  M => _root_.types.Test.M#
  N => _root_.types.Test.N#
_root_.types.Test.C#compoundType3. => val compoundType3: : M with N { <?> }
  M => _root_.types.Test.M#
  N => _root_.types.Test.N#
  k => _root_.types.Test.C#`<refinement>`#k().
_root_.types.Test.C#existentialType1. => val existentialType1: : T forSome { type T >: Nothing <: Any }
  T => _root_.types.Test.C#`existentialType1 `(T).T#
_root_.types.Test.C#p. => val p: : P
  P => _root_.types.P#
_root_.types.Test.C#singleType1. => val singleType1: : C.this.x.type
  C => _root_.types.Test.C#
  x => _root_.types.Test.C#x.
_root_.types.Test.C#singleType2. => val singleType2: : C.this.p.x.type
  C => _root_.types.Test.C#
  p => _root_.types.Test.C#p.
  x => _root_.types.P.x#
_root_.types.Test.C#superType1. => val superType1: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#superType2. => val superType2: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#superType3. => val superType3: : Int
  Int => _root_.scala.Int#
_root_.types.Test.C#thisType1. => val thisType1: : C.this.type
  C => _root_.types.Test.C#
_root_.types.Test.C#thisType2. => val thisType2: : C.this.type
  C => _root_.types.Test.C#
_root_.types.Test.C#typeLambda1(). => def typeLambda1: [M [_ >: Nothing <: Any] => >: Nothing <: Any] => : Nothing
  M => _root_.types.Test.C#typeLambda1().[M]
  Nothing => _root_.scala.Nothing#
_root_.types.Test.C#typeLambda1().[M] => typeparam M: [_ >: Nothing <: Any] => >: Nothing <: Any
  _ => _root_.types.Test.C#typeLambda1().[M][_]
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#typeLambda1().[M][_] => typeparam _: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.Test.C#typeRef1. => val typeRef1: : C
  C => _root_.types.Test.C#
_root_.types.Test.C#typeRef2. => val typeRef2: : C.this.p.C
  C => _root_.types.Test.C#
  p => _root_.types.Test.C#p.
  C => _root_.types.P.C#
_root_.types.Test.C#typeRef3. => val typeRef3: : T#C
  T => _root_.types.T#
  C => _root_.types.T.C#
_root_.types.Test.C#typeRef4. => val typeRef4: : List[Int]
  List => _root_.scala.package.List#
  Int => _root_.scala.Int#
_root_.types.Test.C#x. => val x: : C.this.p.X
  C => _root_.types.Test.C#
  p => _root_.types.Test.C#p.
  X => _root_.types.P.X#
_root_.types.Test.Literal. => final object Literal
_root_.types.Test.Literal.bool. => final val bool: : true
_root_.types.Test.Literal.char. => final val char: : 'a'
_root_.types.Test.Literal.clazzOf. => final val clazzOf: : Class[Option[Int]]
  Class => _root_.java.lang.Class#
  Option => _root_.scala.Option#
  Int => _root_.scala.Int#
_root_.types.Test.Literal.double. => final val double: : 2.0
_root_.types.Test.Literal.float. => final val float: : 1.0f
_root_.types.Test.Literal.int. => final val int: : 1
_root_.types.Test.Literal.javaEnum. => final val javaEnum
_root_.types.Test.Literal.long. => final val long: : 1L
_root_.types.Test.Literal.nil. => final val nil: : null
_root_.types.Test.Literal.string. => final val string: : "a"
_root_.types.Test.Literal.unit. => final val unit: : Unit
  Unit => _root_.scala.Unit#
_root_.types.Test.M# => class M.{+2 decls}
  extends AnyRef
_root_.types.Test.M#`<init>`(). => primaryctor <init>: (): M
  M => _root_.types.Test.M#
_root_.types.Test.M#m(). => def m: : Int
  Int => _root_.scala.Int#
_root_.types.Test.N# => class N.{+2 decls}
  extends AnyRef
_root_.types.Test.N#`<init>`(). => primaryctor <init>: (): N
  N => _root_.types.Test.N#
_root_.types.Test.N#n(). => def n: : Int
  Int => _root_.scala.Int#

types/ann.class
---------------

Summary:
Schema => SemanticDB v3
Uri => types/ann.class
Text => empty
Language => Scala
Symbols => 5 entries

Symbols:
_root_.types.ann# => class ann.{+3 decls}
  extends Annotation
  extends StaticAnnotation
_root_.types.ann#(x) => private[this] param x: T
  T => _root_.types.ann#[T]
_root_.types.ann#[T] => typeparam T: >: Nothing <: Any
  Nothing => _root_.scala.Nothing#
  Any => _root_.scala.Any#
_root_.types.ann#`<init>`(T). => primaryctor <init>: (x: T): ann[T]
  x => _root_.types.ann#`<init>`(T).(x)
  ann => _root_.types.ann#
  T => _root_.types.ann#[T]
_root_.types.ann#`<init>`(T).(x) => param x: T
  T => _root_.types.ann#[T]

types/ann1.class
----------------

Summary:
Schema => SemanticDB v3
Uri => types/ann1.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
_root_.types.ann1# => class ann1.{+1 decls}
  extends Annotation
  extends StaticAnnotation
_root_.types.ann1#`<init>`(). => primaryctor <init>: (): ann1
  ann1 => _root_.types.ann1#

types/ann2.class
----------------

Summary:
Schema => SemanticDB v3
Uri => types/ann2.class
Text => empty
Language => Scala
Symbols => 2 entries

Symbols:
_root_.types.ann2# => class ann2.{+1 decls}
  extends Annotation
  extends StaticAnnotation
_root_.types.ann2#`<init>`(). => primaryctor <init>: (): ann2
  ann2 => _root_.types.ann2#
