scalameta/semanticdb-integration/src/main/scala/example/Example.scala
---------------------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[24..29): scala => _root_.scala.
[30..40): concurrent => _root_.scala.concurrent.
[41..47): Future => _root_.scala.concurrent.Future.;_root_.scala.concurrent.Future#
[56..63): Example <= _root_.example.Example.
[72..77): scala => _root_.scala.
[78..88): collection => _root_.scala.collection.
[89..96): mutable => _root_.scala.collection.mutable.
[97..102): Stack => _root_.scala.collection.mutable.Stack#
[103..106): Int => _root_.scala.Int#
[107..107): ε => _root_.scala.collection.mutable.Stack#`<init>`()V.
[116..120): main <= _root_.example.Example.main([Ljava/lang/String;)V.
[121..125): args <= _root_.example.Example.main([Ljava/lang/String;)V.(args)
[127..132): Array => _root_.scala.Array#
[133..139): String => _root_.scala.Predef.String#
[143..147): Unit => _root_.scala.Unit#
[156..163): println => _root_.scala.Predef.println(Ljava/lang/Object;)V.

Messages:
[41..47): [warning] Unused import
[72..107): [warning] class Stack in package mutable is deprecated (since 2.12.0): Stack is an inelegant and potentially poorly-performing wrapper around List. Use a List assigned to a var instead.

Symbols:
_root_.example. => package example
_root_.example.Example. => final object Example
_root_.example.Example.main([Ljava/lang/String;)V. => def main: (args: Array[String])Unit
_root_.example.Example.main([Ljava/lang/String;)V.(args) => param args: Array[String]
_root_.scala. => package scala
_root_.scala.Array# => final class Array
_root_.scala.Array#`<init>`(I)V. => primaryctor <init>: (_length: Int)Array[T]
_root_.scala.Int# => abstract final class Int
_root_.scala.Int#`<init>`()V. => primaryctor <init>: ()Int
_root_.scala.Predef.String# => type String: String
_root_.scala.Predef.println(Ljava/lang/Object;)V. => def println: (x: Any)Unit
_root_.scala.Unit# => abstract final class Unit
_root_.scala.Unit#`<init>`()V. => primaryctor <init>: ()Unit
_root_.scala.collection. => package collection
_root_.scala.collection.mutable. => package mutable
_root_.scala.collection.mutable.Stack# => class Stack
_root_.scala.collection.mutable.Stack#`<init>`()V. => secondaryctor <init>: ()scala.collection.mutable.Stack[A]
_root_.scala.collection.mutable.Stack#`<init>`(Lscala/collection/immutable/List;)V. => private primaryctor <init>: (elems: List[A])scala.collection.mutable.Stack[A]
_root_.scala.concurrent. => package concurrent
_root_.scala.concurrent.Future.;_root_.scala.concurrent.Future# => val <import scala.concurrent.Future>: scala.concurrent.Future.type <and> scala.concurrent.Future


scalameta/semanticdb-integration/src/main/scala/example/Sugar.scala
-------------------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[23..28): Sugar <= _root_.example.Sugar#
[29..29): ε <= _root_.example.Sugar#`<init>`()V.
[33..37): List => _root_.scala.collection.immutable.List.
[41..44): map => _root_.scala.collection.immutable.List#map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;.
[47..48): + => _root_.scala.Int#`+`(I)I.
[54..59): Array => _root_.scala.Array.
[60..65): empty => _root_.scala.Array.empty(Lscala/reflect/ClassTag;)Ljava/lang/Object;.
[66..69): Int => _root_.scala.Int#
[71..81): headOption => _root_.scala.collection.TraversableLike#headOption()Lscala/Option;.
[91..102): stripPrefix => _root_.scala.collection.immutable.StringLike#stripPrefix(Ljava/lang/String;)Ljava/lang/String;.

Symbols:
_root_.example. => package example
_root_.example.Sugar# => class Sugar
_root_.example.Sugar#`<init>`()V. => primaryctor <init>: ()example.Sugar
_root_.scala.Array. => final object Array
_root_.scala.Array.empty(Lscala/reflect/ClassTag;)Ljava/lang/Object;. => def empty: [T](implicit evidence$1: scala.reflect.ClassTag[T])Array[T]
_root_.scala.Int# => abstract final class Int
_root_.scala.Int#`+`(I)I. => abstract def +: (x: Int)Int
_root_.scala.Int#`<init>`()V. => primaryctor <init>: ()Int
_root_.scala.collection.TraversableLike#headOption()Lscala/Option;. => def headOption: Option[A]
_root_.scala.collection.immutable.List#map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;. => final def map: [B, That](f: A => B)(implicit bf: scala.collection.generic.CanBuildFrom[List[A],B,That])That
_root_.scala.collection.immutable.List. => final object List
_root_.scala.collection.immutable.StringLike#stripPrefix(Ljava/lang/String;)Ljava/lang/String;. => def stripPrefix: (prefix: String)String

Sugars:
[37..37): *.apply[Int]
  [0..1): * => _star_.
  [2..7): apply => _root_.scala.collection.immutable.List.apply(Lscala/collection/Seq;)Lscala/collection/immutable/List;.
[44..44): *[Int, List[Int]]
  [0..1): * => _star_.
[51..51): *(scala.collection.immutable.List.canBuildFrom[Int])
  [0..1): * => _star_.
  [34..46): canBuildFrom => _root_.scala.collection.immutable.List.canBuildFrom()Lscala/collection/generic/CanBuildFrom;.
[54..70): scala.Predef.intArrayOps(*)
  [13..24): intArrayOps => _root_.scala.Predef.intArrayOps([I)[I.
  [25..26): * => _star_.
[70..70): *(((ClassTag.Int): scala.reflect.ClassTag[Int]))
  [0..1): * => _star_.
  [13..16): Int => _root_.scala.reflect.ClassTag.Int.
[84..90): scala.Predef.augmentString(*)
  [13..26): augmentString => _root_.scala.Predef.augmentString(Ljava/lang/String;)Ljava/lang/String;.
  [27..28): * => _star_.
